{"pageProps":{"posts":[{"title":"Digging into Allegro, or how I started my testing career","link":"https://blog.allegro.tech/2021/03/digging-into-allegro-how-i-started-testing-career.html","pubDate":"Tue, 23 Mar 2021 00:00:00 +0100","authors":{"author":[{"name":["Aleksandra Kulesz"],"photo":["https://blog.allegro.tech/img/authors/aleksandra.kulesz.jpg"],"url":["https://blog.allegro.tech/authors/aleksandra.kulesz"]}]},"content":"<p>Maybe it’s another “How I’ve changed my worklife” story, but I hope it is an interesting one. It seems quite important to tell: before the beginning of my\nAllegro adventure, I was working as… an archaeologist. It was both physical work on excavations and research work at my PhD studies. And the only thing that\nconnects my past work and the current one is: attention to detail.</p>\n\n<p>I had been thinking about changing my career path for some time. I’ve got some IT-experienced friends and they convinced me to try my luck in that field. In the\nbeginning I learned some front-end technologies on my own. Later I systematized and developed my knowledge at a programming bootcamp. And started looking for a\njob. I sent my application to Allegro for a front-end developer offer. Unfortunately, my lack of experience (and probably knowledge, too) caused me not to get a\njob offer. However, someone from the HR squad encouraged me to not give up and try one more time with the <a href=\"https://allegro.pl/praca/staze\">Summer eXperience internship program</a>.</p>\n\n<h2 id=\"it-begins\">It begins!</h2>\n\n<p>I did it! I was invited to begin cooperation (as Test Engineer Intern) with Allegro’s teams responsible for developing listings (search result pages). First of\nJuly was the day when I and my 52 intern-colleagues started work. After a two-day long onboarding (a very intensive time filled with tons of useful pieces of\ninformation!), I met my teammates for the first time. During summertime anti-covid restrictions were not so strict and I was able to visit the office a few\ntimes. We discussed my responsibilities and they guided me through the listings domain.</p>\n\n<p>In the beginning of my internship I had to test manually our web and mobile-web solutions. For a person who never had anything to do with a complex\nmicroservices system it was quite a challenging experience. I needed to understand and learn how services work and communicate with each other. The next step\nwas to become familiar with test environments. Phoenix (development test environments) and Sandbox are very useful, but at the same time they are very fussy.\nYou have to be quite patient to work with those tools. And when you are a QA Engineer you work with them all the time! But it turned out to be just a warm up. I\nquickly learned how to test our mobile applications (both for Android and iOS) and write and maintain automatic tests in the <a href=\"https://www.cypress.io/\">Cypress framework</a>.\nI was introduced to chaos and efficiency testing. I also wrote my first automatic tests in <a href=\"https://developer.android.com/training/testing/espresso\">Espresso</a>\nand TeaBiscuit (our internal tool). Every day brought something exciting and new, and still does.</p>\n\n<h2 id=\"what-do-i-like\">What do I like?</h2>\n\n<p>My favourite side of Allegro is knowledge sharing. Regarding common problems with technology or domain knowledge, I can always ask my supportive teammates, but\nthere is much more. We can take part in many interesting courses and workshops organised by people truly dedicated to their subjects. Among those are not only\ntech-courses, but you can also take part in workshops which develop your soft or leadership skills. In my opinion, the most important thing is talking to other\ntesters in our company. We have got a slack channel, a hot field of debates, sharing experiences and solving problems. There is also a monthly testers’ meeting.\nDuring these events we can present our tools, and share our feelings about them. After a short lecture we discuss a lot and it is really inspiring. Last but not\nleast are our conferences and hackathons. Allegro organizes amazing, huge meetings (in the past year, they were, of course, organised online). Subjects are very\ndiversified and broaden horizons.</p>\n\n<p>Another amazing issue is the attitude. The whole team is proud of their work and tries to cooperate agreeably in order to be effective and efficient. Even as an\nIntern you do not feel as a second-class employee, you are treated as seriously as your coworker with ten years of experience. I never met a person who was rude\nto me, or was angry with my lack of knowledge. Everybody knows that there are newbies in the company, and they are forgiving. When you achieve a goal your\ncolleagues are happy for you.</p>\n\n<h2 id=\"any-downsides\">Any downsides?</h2>\n\n<p>I was thinking long and hard about downsides or disadvantages of working at Allegro. Beside problems with test environments I mentioned above, I have one little\nissue. Because the company is so big, there are so many teams and services it is sometimes difficult to find the source of needed information. From time to time\nit takes much longer than you assumed. It might be a little bit frustrating. It also causes that many teams develop similar/alternative tools at the same time.\nSix months later, we realize that it could have been achieved faster and with less effort.Therefore, communication seems to be the most important thing, and\nsometimes it can be a bit neglected.</p>\n\n<p>There is another minor difficulty. There are small pieces of code, small features that do not have an owner. When you find a bug there or would like to make\nsome changes on it, it is not obvious to whom you should communicate your actions.</p>\n\n<h2 id=\"lets-wrap-up\">Let’s wrap up!</h2>\n\n<p>I like working with my teammates. I believe that I have developed a lot since I started work here. I am really happy to be part of this company, because Allegro\nis a great opportunity for everyone who wants to learn. It is good to be here! / Dobrze tu być!</p>\n","contentSnippet":"Maybe it’s another “How I’ve changed my worklife” story, but I hope it is an interesting one. It seems quite important to tell: before the beginning of my\nAllegro adventure, I was working as… an archaeologist. It was both physical work on excavations and research work at my PhD studies. And the only thing that\nconnects my past work and the current one is: attention to detail.\nI had been thinking about changing my career path for some time. I’ve got some IT-experienced friends and they convinced me to try my luck in that field. In the\nbeginning I learned some front-end technologies on my own. Later I systematized and developed my knowledge at a programming bootcamp. And started looking for a\njob. I sent my application to Allegro for a front-end developer offer. Unfortunately, my lack of experience (and probably knowledge, too) caused me not to get a\njob offer. However, someone from the HR squad encouraged me to not give up and try one more time with the Summer eXperience internship program.\nIt begins!\nI did it! I was invited to begin cooperation (as Test Engineer Intern) with Allegro’s teams responsible for developing listings (search result pages). First of\nJuly was the day when I and my 52 intern-colleagues started work. After a two-day long onboarding (a very intensive time filled with tons of useful pieces of\ninformation!), I met my teammates for the first time. During summertime anti-covid restrictions were not so strict and I was able to visit the office a few\ntimes. We discussed my responsibilities and they guided me through the listings domain.\nIn the beginning of my internship I had to test manually our web and mobile-web solutions. For a person who never had anything to do with a complex\nmicroservices system it was quite a challenging experience. I needed to understand and learn how services work and communicate with each other. The next step\nwas to become familiar with test environments. Phoenix (development test environments) and Sandbox are very useful, but at the same time they are very fussy.\nYou have to be quite patient to work with those tools. And when you are a QA Engineer you work with them all the time! But it turned out to be just a warm up. I\nquickly learned how to test our mobile applications (both for Android and iOS) and write and maintain automatic tests in the Cypress framework.\nI was introduced to chaos and efficiency testing. I also wrote my first automatic tests in Espresso\nand TeaBiscuit (our internal tool). Every day brought something exciting and new, and still does.\nWhat do I like?\nMy favourite side of Allegro is knowledge sharing. Regarding common problems with technology or domain knowledge, I can always ask my supportive teammates, but\nthere is much more. We can take part in many interesting courses and workshops organised by people truly dedicated to their subjects. Among those are not only\ntech-courses, but you can also take part in workshops which develop your soft or leadership skills. In my opinion, the most important thing is talking to other\ntesters in our company. We have got a slack channel, a hot field of debates, sharing experiences and solving problems. There is also a monthly testers’ meeting.\nDuring these events we can present our tools, and share our feelings about them. After a short lecture we discuss a lot and it is really inspiring. Last but not\nleast are our conferences and hackathons. Allegro organizes amazing, huge meetings (in the past year, they were, of course, organised online). Subjects are very\ndiversified and broaden horizons.\nAnother amazing issue is the attitude. The whole team is proud of their work and tries to cooperate agreeably in order to be effective and efficient. Even as an\nIntern you do not feel as a second-class employee, you are treated as seriously as your coworker with ten years of experience. I never met a person who was rude\nto me, or was angry with my lack of knowledge. Everybody knows that there are newbies in the company, and they are forgiving. When you achieve a goal your\ncolleagues are happy for you.\nAny downsides?\nI was thinking long and hard about downsides or disadvantages of working at Allegro. Beside problems with test environments I mentioned above, I have one little\nissue. Because the company is so big, there are so many teams and services it is sometimes difficult to find the source of needed information. From time to time\nit takes much longer than you assumed. It might be a little bit frustrating. It also causes that many teams develop similar/alternative tools at the same time.\nSix months later, we realize that it could have been achieved faster and with less effort.Therefore, communication seems to be the most important thing, and\nsometimes it can be a bit neglected.\nThere is another minor difficulty. There are small pieces of code, small features that do not have an owner. When you find a bug there or would like to make\nsome changes on it, it is not obvious to whom you should communicate your actions.\nLet’s wrap up!\nI like working with my teammates. I believe that I have developed a lot since I started work here. I am really happy to be part of this company, because Allegro\nis a great opportunity for everyone who wants to learn. It is good to be here! / Dobrze tu być!","guid":"https://blog.allegro.tech/2021/03/digging-into-allegro-how-i-started-testing-career.html","categories":["tech","testing","intern","career change"],"isoDate":"2021-03-22T23:00:00.000Z","thumbnail":"images/post-headers/testing.png"},{"title":"Finite-state machines made easy","link":"https://blog.allegro.tech/2021/03/state-machines-made-easy.html","pubDate":"Fri, 05 Mar 2021 00:00:00 +0100","authors":{"author":[{"name":["Tymon Felski"],"photo":["https://blog.allegro.tech/img/authors/tymon.felski.jpg"],"url":["https://blog.allegro.tech/authors/tymon.felski"]}]},"content":"<p>Coordinating complex processes, both business and technical, can be a challenging issue in a distributed system.\nEspecially when the complications associated with them, such as concurrency, idempotency, scalability and hindered\ntestability, come into play — possibly all at once.\nThis is definitely something that can keep many programmers awake at night.</p>\n\n<p>While this may sound dramatic, in reality there are many different solutions to this problem.\nOne group of such solutions extensively uses finite-state machines also known as finite-state automata.\nAs this article is meant for everyone, let’s start with some background information about what they are and how\nthey work.</p>\n\n<h2 id=\"what-are-finite-state-machines\">What are finite-state machines</h2>\n\n<p>For the sake of readability, I will sometimes be referring to finite-state machines as simply “state machines”.\nIf you’re already familiar with their formal definition, you may skip to the next section.</p>\n\n<p>Formally speaking, a finite-state machine is a mathematical model of computation that describes an abstract system\nhaving a finite number of permissible states. At any given point in time, the system is in exactly one of these\nstates.</p>\n\n<p>In practical terms such a machine is described by:</p>\n\n<ul>\n  <li>an initial (start) state,</li>\n  <li>a set of possible states,</li>\n  <li>a sequence of possible inputs (events),</li>\n  <li>a transition function which based on the last observed input and the machine’s current state, determines the next\nstate,</li>\n  <li>and a set of terminal (end) states — optionally.</li>\n</ul>\n\n<p>The machine starts off in the initial state and inspects all inputs in sequence.\nUpon observing each input, it uses the transition function to change its state.\nThe processing ends once all inputs have been observed.\nIf the machine’s state at the end of processing is one of the terminal states, the machine is assumed to accept the\ngiven input, and to reject it otherwise.</p>\n\n<p>As a side note, the description provided above uses the deterministic model of a finite-state automaton.\nThere are also alternative, non-deterministic machines, but I won’t be delving into them too much, as they can be\nconverted to deterministic ones anyway.</p>\n\n<p>If you’ve read this far, hopefully the rest of this post will be easier on the mind!\nDespite the intimidating formal definition, finite-state machines are more widespread than you might imagine.\nUpon closer inspection you might be able to spot them in your everyday life under the hood of things such as vending\nmachines, traffic lights and elevators.\nIn .NET they are used in the implementation of <code class=\"language-plaintext highlighter-rouge\">async</code>/<code class=\"language-plaintext highlighter-rouge\">await</code> or <code class=\"language-plaintext highlighter-rouge\">yield</code> syntax.\nTry decompiling your code and see how the language authors implemented those features.\nYou have probably already used some sort of state machine in your code without even realising it!</p>\n\n<h2 id=\"a-simple-example-of-a-basic-state-machine-implementation\">A simple example of a basic state machine implementation</h2>\n\n<p>Let’s take a closer look at the following piece of code:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">Button</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Play</span><span class=\"p\">,</span>\n    <span class=\"n\">Stop</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">State</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Playing</span><span class=\"p\">,</span>\n    <span class=\"n\">NotPlaying</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Player</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">State</span> <span class=\"n\">CurrentState</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">private</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">=</span> <span class=\"n\">State</span><span class=\"p\">.</span><span class=\"n\">NotPlaying</span><span class=\"p\">;</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">HandleClick</span><span class=\"p\">(</span><span class=\"n\">Button</span> <span class=\"n\">button</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">button</span> <span class=\"p\">==</span> <span class=\"n\">Button</span><span class=\"p\">.</span><span class=\"n\">Play</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">CurrentState</span> <span class=\"p\">=</span> <span class=\"n\">State</span><span class=\"p\">.</span><span class=\"n\">Playing</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">button</span> <span class=\"p\">==</span> <span class=\"n\">Button</span><span class=\"p\">.</span><span class=\"n\">Stop</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">CurrentState</span> <span class=\"p\">=</span> <span class=\"n\">State</span><span class=\"p\">.</span><span class=\"n\">NotPlaying</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is an example of a very simple state machine with two states and two events.\nThe player can be either playing or not playing music.\nPressing the Play button will start or keep playing music, while pressing the Stop button will stop the music or keep\nit stopped.</p>\n\n<p>The code is manageable at this point, since the example is quite straightforward.\nHowever, I hope you can imagine how adding more media controls that are usually present in music players will quickly\nresult in complex code that will not be easily maintainable anymore.\nFor instance, consider a feature request to have the Previous button change to the previous track if the player is less\nthan 3 seconds into the current track, or stay at the current track but rewind it to the beginning otherwise.</p>\n\n<p>That being said, in many cases this kind of state machine implementation would be more than enough.\nYou don’t always have to use a state-of-the-art, bleeding-edge solution to achieve desired goals.\nHowever, this is not something I would recommend to someone who is trying to tackle coordination of asynchronous\noperations within a distributed system.</p>\n\n<h2 id=\"a-more-maintainable-approach\">A more maintainable approach</h2>\n\n<p>Let me share our approach to this problem.\nWe have come up with a framework for building state machines in .NET with very little code that is maintainable and\ntestable.\nState machines built with this framework serve a purpose of orchestrating a wide range of business and technical\nprocesses in our microservice-based distributed architecture.\nThe framework is equipped with various features dictated by paradigms of distributed systems, which extend the\nstandard state machine definition.</p>\n\n<p>Before I move on to an example of its real-life application, I want to break down the state machine’s API, so that you\nknow what you’re looking at later on.\nTo keep things short, I will be showing you only snippets of simplified code, as implementation details can be\nexpanded upon in follow-up posts.</p>\n\n<p>The state machine is defined as follows:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">StateMachine</span><span class=\"p\">&lt;</span><span class=\"n\">TStateBase</span><span class=\"p\">,</span> <span class=\"n\">TEventBase</span><span class=\"p\">&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">StateMachine</span><span class=\"p\">(</span><span class=\"n\">TStateBase</span> <span class=\"n\">initialState</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// ...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>It is a generic class that requires a definition of base types for all states (<code class=\"language-plaintext highlighter-rouge\">TStateBase</code>) and for all transition\ntriggers (<code class=\"language-plaintext highlighter-rouge\">TEventBase</code>).\nThe constructor accepts an initial state from which the state machine will start its operation.</p>\n\n<p>We can create the state machine like so:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">var</span> <span class=\"n\">stateMachine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">StateMachine</span><span class=\"p\">&lt;</span><span class=\"n\">StateBase</span><span class=\"p\">,</span> <span class=\"n\">EventBase</span><span class=\"p\">&gt;(</span><span class=\"k\">new</span> <span class=\"nf\">InitialState</span><span class=\"p\">());</span>\n</code></pre></div></div>\n\n<p>Having created this object, we may start defining transitions.\nEach transtion consists of three required elements:</p>\n\n<ul>\n  <li>the state from which the transition can be triggered,</li>\n  <li>the transition trigger (an event),</li>\n  <li>the state to which the transition leads.</li>\n</ul>\n\n<p>Optionally, a transition can have side effects, called simply commands.\nA command (or a set of commands) will be run after a successful transition.\nThose can be pretty much anything from sending a message to another state machine to calling a specific service and\ndelegating a task to it.\nCommands allow a seamless integration of the state machine with external components.\nThere is a drawback, however.\nCommand execution may fail, what requires an idempotent retry policy to be employed.</p>\n\n<p>Transitions and commands can be conditional, meaning that a logical expression can be guarding and preventing the\nexecution of the whole transition, or just a command in some cases.</p>\n\n<p>A builder pattern which combines all of the aforementioned requirements is used to compose a transition:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">TStateFrom</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">TEvent</span><span class=\"p\">&gt;(</span><span class=\"cm\">/* Expression&lt;Func&lt;TStateFrom, TEvent, bool&gt;&gt; */</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">TStateTo</span><span class=\"p\">&gt;(</span><span class=\"cm\">/* Expression&lt;Func&lt;TStateFrom, TEvent, TStateTo&gt;&gt; */</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">(</span>\n        <span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"cm\">/* Expression&lt;Func&lt;TStateFrom, TEvent, TStateTo, bool&gt;&gt; */</span><span class=\"p\">,</span>\n        <span class=\"n\">then</span><span class=\"p\">:</span> <span class=\"cm\">/* Expression&lt;Func&lt;TStateFrom, TEvent, TStateTo, TCommand&gt;&gt; */</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">)</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>This structure may be overwhelming at first, but bear with me.\nIt will all make sense in a bit.\nAs for now you need to know that:</p>\n\n<ul>\n  <li>if the state machine is in a state of <code class=\"language-plaintext highlighter-rouge\">TStateFrom</code> type,</li>\n  <li>and an event of type <code class=\"language-plaintext highlighter-rouge\">TEvent</code> occured,</li>\n  <li>and the condition (if defined) passed to <code class=\"language-plaintext highlighter-rouge\">When</code> method is satisfied,</li>\n</ul>\n\n<p>the transition will fire up and the state machine will switch to a new state of type <code class=\"language-plaintext highlighter-rouge\">TStateTo</code> using the factory method\nexpression passed to <code class=\"language-plaintext highlighter-rouge\">ToState</code> method.</p>\n\n<p>The state machine class exposes a method which can be used to trigger a transition with an event:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"n\">TransitionResult</span> <span class=\"nf\">Apply</span><span class=\"p\">(</span><span class=\"n\">TEventBase</span> <span class=\"n\">@event</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>This method applies the supplied event to the current state by trying to find a matching transition in the transition\nmapping and changes the internal state of the machine.\nThe result contains information about the performed transition, along with commands that should be run.</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">TransitionResult</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"n\">TStateBase</span> <span class=\"n\">StateFrom</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">TEventBase</span> <span class=\"n\">Event</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">TStateBase</span> <span class=\"n\">StateTo</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">object</span><span class=\"p\">&gt;</span> <span class=\"n\">Commands</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">bool</span> <span class=\"n\">IsValid</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If no matching transition definition is found given the machine’s current state – or if a transition is found, but its\nprecondition is not met – the event application will result in an invalid transition.\nIn that case, the state machine will not react to the event and simply retain its state, possibly logging that an\ninvalid event was received.</p>\n\n<p>If there are multiple matching transitions, the first one will fire up (in definition order).\nWe should, however, avoid designing states machines in such way if possible.</p>\n\n<p>As you can see, the representation of the machine is primarily type-based, so we can use polymorphism to our advantage.\nBy calling <code class=\"language-plaintext highlighter-rouge\">FromState&lt;TStateBase&gt;()</code> we can have a transition that can be fired up from any state.\nSimilarily, if we use a type that only some selected states derive from, we will have a transition applicable to these\nstates only.\nIt would be equivalent to duplicating that same transition for every one of these states.\nThis syntax can be particularly useful, when dealing with processes that have an expiration date and have to be\ncompleted within a specific time frame.\nReceiving an event about the process’ expiration may have to be handled regardless of the machine’s current state and\nresult in termination immediately.</p>\n\n<h2 id=\"implementation-manifest\">Implementation manifest</h2>\n\n<p>Now that I’ve described how a state machine can be defined in a declarative way using our framework, let’s talk a bit\nabout how that definition actually runs.</p>\n\n<p>In general, we use dependency injection to make the state machine definition work with other services and add-ons,\nsuch as specific command runners.\nI promised I would not dive deep into implementation details, but nonetheless I want to give you a little taste of\nwhat sits behind the scenes.</p>\n\n<p>If you don’t care for any of that, you may skip to the “Real-life example” section.</p>\n\n<h3 id=\"storage\">Storage</h3>\n\n<p>The state machine implementation is based on event sourcing.\nIn summary, this means that we don’t save the state of our application objects, but rather a series of events that\nchange the object’s state.\nThese events will give us the current view of the object when aggregated (“replayed”) in the order in which they\noccured.\nFor this purpose we currently use an open-source library,\n<a href=\"https://github.com/SQLStreamStore/SQLStreamStore\">SQLStreamStore</a>.</p>\n\n<p>SQLStreamStore offers an atomic and idempotent stream append operation.\nThanks to this, we don’t have to worry about race conditions between multiple instances of the same state machine\nhandling events in parallel, what is great for scalability.\nWe can also recognize a situation when the same event is being fed into the state machine again, what can happen\nwhen dealing with retry policies.\nThat, on the other hand, gives us a pretty good way of achieving deduplication.</p>\n\n<h3 id=\"caching\">Caching</h3>\n\n<p>Replaying all events every single time is an unnecessary overhead that we decided to mitigate by introducing\na lock-free cache for state snapshots.\nAfter each transition a state machine will cache its current state along with the stream version which it\ncorresponds to.\nThis gives us the ability to restore the state machine to the state it was in after handling <code class=\"language-plaintext highlighter-rouge\">n-1</code> events, when we want\nto handle the <code class=\"language-plaintext highlighter-rouge\">n</code>-th event.</p>\n\n<p>It requires, however, the states to be immutable, or else we may end up with an unexpected behaviour.\nIf states were not immutable, we could not be certain that the state object we cached after handling the <code class=\"language-plaintext highlighter-rouge\">n</code>-th event\nis still the same and has not been modified in the meantime.\nMoreover, immutable objects are inherently thread-safe.</p>\n\n<h3 id=\"instrumentation\">Instrumentation</h3>\n\n<p>This state machine framework is also equipped with heavy instrumentation.\nEvery executed transition and state change is logged, so we can easily track any errors.\nThis data is also useful for our data analytics team to keep track of business processes.\nA lot of different metrics come into play to measure performance of each and every state machine deployed.</p>\n\n<p>Finally, every historical transition is saved in a stream — separate from the event stream — and can be viewed with our\ninternal back-office tools.</p>\n\n<p>Thanks to the finite nature of the state machines, we can always log the current state and trace what made the system\nto be in that state, along with all its previous states.\nThis is something quite invaluable and helps immensely when diagnosing issues, especially in complex and\ninter-dependent business scenarios where a lot of things happen at the same time.</p>\n\n<h2 id=\"real-life-example\">Real-life example</h2>\n\n<p>So finally, the big question: how is this framework used on our platform?\nTo answer that we don’t need to reach far.</p>\n\n<p>In July of 2020 we launched a new payment method called Allegro Pay, which will eventually be available to every buyer\non Allegro.\nThis service allows the users to buy items now and pay for them later in a single payment after 30 days, or\nin multiple smaller monthly payments, depending on the value of purchased goods.</p>\n\n<p>Repayments can be easily made online using our Allegro Pay dashboard.\nUsers are even able to pay for multiple purchases at once.</p>\n\n<p><img src=\"/img/articles/2021-03-05-state-machines-made-easy/allegro-pay-dashboard.png\" alt=\"Allegro Pay dashboard\" /></p>\n\n<p>For more detailed information, I encourage you to read our\n<a href=\"https://allegro.pl/pomoc/dla-kupujacych/allegro-pay/\">Allegro Pay FAQ</a>.</p>\n\n<p>I suspect you already know where I’m going with this — my goal is to show you how our state machine framework is used\nto coordinate an actual business process of handling a repayment within Allegro Pay.</p>\n\n<h3 id=\"the-process-specification\">The process specification</h3>\n\n<p>Before we create our state machine, we need to have a rough idea of which states and events we want to handle.</p>\n\n<p>The repayment process is started in two different ways, but will end alike in both cases.</p>\n\n<ol>\n  <li>\n    <p>The user can initialize an immediate online repayment via the Allegro Pay dashboard.\n They are redirected to the payment provider’s website and complete the process there.</p>\n  </li>\n  <li>\n    <p>Alternatively, the user can request to repay their purchase with a traditional wire transfer, what we call an\noffline repayment.\n We know nothing about it until the money actually arrives at the target bank account.\n That method may take up to a couple of days.</p>\n  </li>\n</ol>\n\n<p>At this point both repayment paths merge, since from now on we can discard any knowledge about how the money\nwas received and focus on the fact that we have it.\nThe money source won’t be useful during the process coordination anymore.</p>\n\n<p>The next step is to register the repayment in our bookkeeping system.\nThe registration part is important for us, because it will tell us whether the purchase was paid in full or if further\nrepayments are required.\nAfter receiving information about successful registration, an email is sent to the user confirming that the\nrepayment was registered.</p>\n\n<p>After repayment is registered, we asynchronously await the feedback from the bookkeeping system on the transaction\nbeing settled and the repayment is to be marked as completed.</p>\n\n<h3 id=\"designing-the-state-machine\">Designing the state machine</h3>\n\n<p>I could show you the finished state machine and just paste a wall of text here, describing what it does, but where’s\nthe fun in that?\nInstead, I’d like to show you the step-by-step process I would go through when designing this kind of state machine.</p>\n\n<p>I’ll start off by simply creating a state machine that handles a repayment of a single purchase and then extend it\nto work for all cases.\nFirst we need to define the base types for all states and events:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">abstract</span> <span class=\"k\">class</span> <span class=\"nc\">StateBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">UserId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">RepaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">PaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"nf\">StateBase</span><span class=\"p\">(</span><span class=\"n\">StateBase</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">other</span> <span class=\"p\">==</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"n\">UserId</span> <span class=\"p\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">;</span>\n        <span class=\"n\">RepaymentId</span> <span class=\"p\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">;</span>\n        <span class=\"n\">PaymentId</span> <span class=\"p\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">abstract</span> <span class=\"k\">class</span> <span class=\"nc\">EventBase</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see, I already equipped the base state with all the properties we will need later to orchestrate this\nprocess:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">UserId</code> — tells us who is repaying,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">RepaymentId</code> — uniquely identifies the repayment process,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">PaymentId</code> — identifies the payment made by the user for this repayment.</li>\n</ul>\n\n<p>As for the event base, we don’t need anything special there, so it’s empty.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">StateBase</code> class features a copy constructor, which rewrites all properties from the previous state when creating\na new one.</p>\n\n<p>None of the states will have any special properties, so there’s no point in painstakingly showing all individual\nsubclasses representing each state.\nHere are just a few sample classes of the initial state (<code class=\"language-plaintext highlighter-rouge\">NotStarted</code>) and one of the subsequent states:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">NotStarted</span> <span class=\"p\">:</span> <span class=\"n\">StateBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">NotStarted</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"k\">base</span><span class=\"p\">(</span><span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Created</span> <span class=\"p\">:</span> <span class=\"n\">StateBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">Created</span><span class=\"p\">(</span><span class=\"n\">StateBase</span> <span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"k\">base</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>All of the remaining states are defined similarly to <code class=\"language-plaintext highlighter-rouge\">Created</code> state.\nThose states are:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">Paid</code>,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Failed</code>,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Registered</code>,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Completed</code>.</li>\n</ul>\n\n<p>Once we have our states, we can focus on events and introduce transitions, one by one.</p>\n\n<p>We’ll start by handling an online repayment.\nIt begins with the user creating a repayment entity by selecting a payment in the Allegro Pay dashboard.\nThis generates an event, let’s call it <code class=\"language-plaintext highlighter-rouge\">OnlineRepaymentCreated</code>:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">OnlineRepaymentCreated</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">UserId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">RepaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">PaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We want this event to trigger a transition from <code class=\"language-plaintext highlighter-rouge\">NotStarted</code> to <code class=\"language-plaintext highlighter-rouge\">Created</code> state.</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1. NotStarted : OnlineRepaymentCreated -&gt; Created</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">NotStarted</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">OnlineRepaymentCreated</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Created</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Created</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">UserId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span>\n        <span class=\"n\">RepaymentId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">,</span>\n        <span class=\"n\">PaymentId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span>\n    <span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>At this point the user sees the repayment form, where they select a payment method.\nThey are then redirected to the payment provider’s website to finish the repayment.\nIn most cases it will succeed, but in some it fails due to a multitude of reasons, such as insufficient\nfunds on the account or the user providing wrong confirmation code.</p>\n\n<p>Therefore, we need two events:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">OnlineRepaymentPaid</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">OnlineRepaymentFailed</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We could go about a single event called <code class=\"language-plaintext highlighter-rouge\">RepaymentResult</code> with an enum property indicating a success or a failure, but\nin my opinion the former approach is cleaner and more open to future changes.\nThese events will play a role in tranistions no. 2 and 3:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 2. Created : OnlineRepaymentPaid -&gt; Paid</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Created</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">OnlineRepaymentPaid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Paid</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">RegisterPaymentCommand</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">));</span>\n\n<span class=\"c1\">// 3. Created : OnlineRepaymentFailed -&gt; Failed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Created</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">OnlineRepaymentFailed</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Failed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Failed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>You might notice that transition no. 2 has a command that I didn’t mention earlier specified.\nIt’s a simple class wrapping the payment identifier, which is interpreted by the command runner as a request to our\nbookkeeping system for registering this payment.</p>\n\n<p>This concludes the online path and we can move on to the offline repayment.\nIt is significantly easier, since we are simply notified that the money has been transferred to us.\nBecause of this, we can completely skip the <code class=\"language-plaintext highlighter-rouge\">Created</code> state and go straight to <code class=\"language-plaintext highlighter-rouge\">Paid</code>.\nWe need an event called <code class=\"language-plaintext highlighter-rouge\">OfflineRepaymentPaid</code> which contains the same properties as <code class=\"language-plaintext highlighter-rouge\">OnlineRepaymentCreated</code>:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">OfflineRepaymentPaid</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">UserId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">RepaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">PaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Let’s use it in the fourth transition that will once again call the registration command:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 4. NotStarted : OfflineRepaymentPaid -&gt; Paid</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">NotStarted</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">OfflineRepaymentPaid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Paid</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">UserId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span>\n        <span class=\"n\">RepaymentId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">,</span>\n        <span class=\"n\">PaymentId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">RegisterPaymentCommand</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>This is where both repayment types merge and we can focus on our bookkeeping system.\nAs mentioned before, we are mostly interested in registration events published by the bookkeeping system.</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PaymentRegistered</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">PaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Once we know that a payment is registered in our bookkeeping system, we are able to send an email to the user\nsummarizing what they paid for and follow-up information whether they still have more payments to be made.\nThis can be done with a transition like this:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 5. Paid : PaymentRegistered -&gt; Registered</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentRegistered</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Registered</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Registered</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">SendRepaymentRegisteredEmailCommand</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>Again, <code class=\"language-plaintext highlighter-rouge\">SendRepaymentRegisteredEmailCommand</code> is a simple class wrapping two properties that will be interpreted by the\ncommand runner and result in an email sent to the user.</p>\n\n<p>The last step is to wait for the final event <code class=\"language-plaintext highlighter-rouge\">PaymentCompleted</code>.\nTheoretically it could be omitted in this state machine, but it’s useful for auditing purposes.</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PaymentCompleted</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">PaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>It’s time to create the final transition:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 6. Registered : PaymentCompleted -&gt; Completed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Registered</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentCompleted</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>And we’re done!\nRight?\nNot really.</p>\n\n<p>As is usually the case with event-sourced systems, the order of incoming events can’t always be relied on.\nThe bookkeeping system will sometimes — for reasons I don’t want to delve into — publish events <code class=\"language-plaintext highlighter-rouge\">PaymentRegistered</code> and\n<code class=\"language-plaintext highlighter-rouge\">PaymentCompleted</code> at the same time.\nDue to a lack of message ordering guarantees, it’s possible for us to receive <code class=\"language-plaintext highlighter-rouge\">PaymentCompleted</code> event before\n<code class=\"language-plaintext highlighter-rouge\">PaymentRegistered</code>.\nThe current definition of the state machine is not prepared for that.</p>\n\n<p>Fortunately, the fix is quite easy, as we can simply introduce two more transitions:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 7. Paid : PaymentCompleted -&gt; Completed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentCompleted</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">));</span>\n\n<span class=\"c1\">// 8. Completed : PaymentRegistered -&gt; Completed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentRegistered</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">SendRepaymentRegisteredEmailCommand</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>In this scenario we completely skip <code class=\"language-plaintext highlighter-rouge\">Registered</code> state, but that’s something we just have to deal with.\nEvents are important from analytics and diagnostics standpoints, states — not so much.</p>\n\n<p>That wraps up the event flow for this scenario.\nIt can be visualized with a diagram like this:</p>\n\n<p><img src=\"/img/articles/2021-03-05-state-machines-made-easy/repayment-state-machine-v1.png\" alt=\"Repayment state machine diagram (V1)\" /></p>\n\n<p>Our state machine framework is equipped with a pretty useful visualisation extension.\nIt’s a pretty neat tool that makes it easy to figure out how the state machine works, without having to delve into the\ncode.\nA simple unit test that calls this extension can render a state machine diagram like one above using PlantUML\nsyntax, which in this case would go as follows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@startuml\nhide empty description\n[*] --&gt; NotStarted\nNotStarted --&gt; Created: &lt;b&gt;OnlineRepaymentCreated&lt;/b&gt;\nCreated --&gt; Paid: &lt;b&gt;OnlineRepaymentPaid&lt;/b&gt;\\n&lt;i&gt;then:&lt;/i&gt; RegisterPaymentCommand\nCreated --&gt; Failed: &lt;b&gt;OnlineRepaymentFailed&lt;/b&gt;\nNotStarted --&gt; Paid: &lt;b&gt;OfflineRepaymentPaid&lt;/b&gt;\\n&lt;i&gt;then:&lt;/i&gt; RegisterPaymentCommand\nPaid --&gt; Registered: &lt;b&gt;PaymentRegistered&lt;/b&gt;\\n&lt;i&gt;then:&lt;/i&gt; SendRepaymentRegisteredEmailCommand\nRegistered --&gt; Completed: &lt;b&gt;PaymentCompleted&lt;/b&gt;\nPaid --&gt; Completed: &lt;b&gt;PaymentCompleted&lt;/b&gt;\nCompleted --&gt; Completed: &lt;b&gt;PaymentRegistered&lt;/b&gt;\\n&lt;i&gt;then:&lt;/i&gt; SendRepaymentRegisteredEmailCommand\n@enduml\n</code></pre></div></div>\n\n<p>However, recall that this is just a state machine to handle a repayment for a single payment selected by the user.\nI promised we would extend it to handle multiple payments.\nLet’s do that.\nFirst we’ll extend the base state definition:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">abstract</span> <span class=\"k\">class</span> <span class=\"nc\">StateBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">UserId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">RepaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"n\">PaymentIds</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"n\">RegisteredPaymentIds</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"n\">CompletedPaymentIds</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"nf\">StateBase</span><span class=\"p\">(</span><span class=\"n\">StateBase</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">other</span> <span class=\"p\">==</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"n\">UserId</span> <span class=\"p\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">;</span>\n        <span class=\"n\">RepaymentId</span> <span class=\"p\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">;</span>\n        <span class=\"n\">PaymentIds</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">);</span>\n        <span class=\"n\">RegisteredPaymentIds</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">);</span>\n        <span class=\"n\">CompletedPaymentIds</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Three things have changed:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">PaymentId</code> changed from a <code class=\"language-plaintext highlighter-rouge\">string</code> to a <code class=\"language-plaintext highlighter-rouge\">HashSet&lt;string&gt;</code> and is now called <code class=\"language-plaintext highlighter-rouge\">PaymentIds</code> to represent multiple\npayments selected by the user,</li>\n  <li>a <code class=\"language-plaintext highlighter-rouge\">HashSet&lt;string&gt;</code> called <code class=\"language-plaintext highlighter-rouge\">RegisteredPaymentIds</code> was added to keep track of registered payments,</li>\n  <li>a <code class=\"language-plaintext highlighter-rouge\">HashSet&lt;string&gt;</code> called <code class=\"language-plaintext highlighter-rouge\">CompletedPaymentIds</code> was added to keep track of completed payments.</li>\n</ul>\n\n<p>We also have to modify <code class=\"language-plaintext highlighter-rouge\">OnlineRepaymentCreated</code> event by introducing a collection of payment identifiers, like so:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">OnlineRepaymentCreated</span> <span class=\"p\">:</span> <span class=\"n\">EventBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">UserId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">RepaymentId</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"n\">PaymentIds</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Because of this, we need to introduce a small change to transition no. 1:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1'. NotStarted : OnlineRepaymentCreated -&gt; Created</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">NotStarted</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">OnlineRepaymentCreated</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Created</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">Created</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">UserId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span>\n        <span class=\"n\">RepaymentId</span> <span class=\"p\">=</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">,</span>\n        <span class=\"n\">PaymentIds</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">)</span>\n    <span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Transition no. 2 is similarly adjusted to these changes by passing the set of payment identifiers to the\nbookkeeping system:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">RegisterPaymentsCommand</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now we can move to the remaining transitions.\nTransition no. 5 has to be split into two.\nWe want to stay in the <code class=\"language-plaintext highlighter-rouge\">Paid</code> state until all registration events are received and only then switch to <code class=\"language-plaintext highlighter-rouge\">Registered</code>.\nThis can be achieved with:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 5'. Paid : PaymentRegistered -&gt; Paid</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentRegistered</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">!</span><span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">All</span><span class=\"p\">(</span>\n        <span class=\"n\">id</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"n\">id</span> <span class=\"p\">==</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Paid</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n\n<span class=\"c1\">// 5''. Paid : PaymentRegistered -&gt; Registered</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentRegistered</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">All</span><span class=\"p\">(</span>\n        <span class=\"n\">id</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"n\">id</span> <span class=\"p\">==</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Registered</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Registered</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">SendRepaymentRegisteredEmailCommand</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>As you can see, the command is now defined only for the second transition that triggers after all payments are\nregistered.\nWe have to slightly adjust transition no. 8, which is responsible for sending the email, too:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 8'. Completed : PaymentRegistered -&gt; Completed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentRegistered</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nf\">RunCommand</span><span class=\"p\">(</span>\n        <span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">SetEquals</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">),</span>\n        <span class=\"n\">then</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nf\">SendRepaymentRegisteredEmailCommand</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">UserId</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">RepaymentId</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>This time the transition is not conditional, however the command is.\nIt will execute only after we handle final registration event and the payment identifier sets <code class=\"language-plaintext highlighter-rouge\">PaymentIds</code> and\n<code class=\"language-plaintext highlighter-rouge\">RegisteredPaymentIds</code> become equal.</p>\n\n<p>We cannot forget about all transitions that are triggered by <code class=\"language-plaintext highlighter-rouge\">PaymentCompleted</code> event.\nThose will have to be changed like so:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 6'. Registered : PaymentCompleted -&gt; Registered</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Registered</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentCompleted</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">!</span><span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">All</span><span class=\"p\">(</span>\n        <span class=\"n\">id</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"n\">id</span> <span class=\"p\">==</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Registered</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Registered</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n\n<span class=\"c1\">// 6''. Registered : PaymentCompleted -&gt; Completed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Registered</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentCompleted</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">All</span><span class=\"p\">(</span>\n        <span class=\"n\">id</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"n\">id</span> <span class=\"p\">==</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n\n<span class=\"c1\">// 7'. Paid : PaymentCompleted -&gt; Paid</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentCompleted</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">!</span><span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">All</span><span class=\"p\">(</span>\n        <span class=\"n\">id</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"n\">id</span> <span class=\"p\">==</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n\n<span class=\"c1\">// 7''. Paid : PaymentCompleted -&gt; Completed</span>\n<span class=\"n\">stateMachine</span>\n    <span class=\"p\">.</span><span class=\"n\">FromState</span><span class=\"p\">&lt;</span><span class=\"n\">Paid</span><span class=\"p\">&gt;()</span>\n    <span class=\"p\">.</span><span class=\"n\">When</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentCompleted</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">All</span><span class=\"p\">(</span>\n        <span class=\"n\">id</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"n\">id</span> <span class=\"p\">==</span> <span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">ToState</span><span class=\"p\">&lt;</span><span class=\"n\">Completed</span><span class=\"p\">&gt;((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">to</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Completed</span><span class=\"p\">(</span><span class=\"k\">from</span><span class=\"p\">);</span>\n        <span class=\"n\">to</span><span class=\"p\">.</span><span class=\"n\">CompletedPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>And we’re done!\nThis time for real.\nAfter all this work we ended up with something that can be visualized with a diagram like this:</p>\n\n<p><img src=\"/img/articles/2021-03-05-state-machines-made-easy/repayment-state-machine-v2.png\" alt=\"Repayment state machine diagram (V2)\" /></p>\n\n<p>I mentioned earlier that we have internal back-office tools to view state machines and their transition history.\nHere is an example view of a repayment process that was coordinated with the state machine we defined above (sensitive\ndata was redacted, since this was taken in production):</p>\n\n<p><img src=\"/img/articles/2021-03-05-state-machines-made-easy/back-office-state-machine-view.png\" alt=\"Back-office state machine view\" /></p>\n\n<h3 id=\"caveats\">Caveats</h3>\n\n<p>You may have noticed some problems here.\nWhat would happen if we received an event with a wrong payment identifier?\nRight now the state machine is not ready for that.\nHowever, that can be remedied relatively easily by adding another condition to <code class=\"language-plaintext highlighter-rouge\">When</code> methods of all transitions for\n<code class=\"language-plaintext highlighter-rouge\">PaymentRegistered</code> and <code class=\"language-plaintext highlighter-rouge\">PaymentCompleted</code> events, such as:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">.</span><span class=\"nf\">When</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">PaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span> <span class=\"cm\">/* ... */</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This would essentialy ensure that we react only to events with correct identifiers.</p>\n\n<p>And what about retries and duplicated events?\nTransition no. 8’ is especially susceptible to that, because it may result in the email being sent to the user twice.\nAnd we don’t want that!\nFortunately, achieving deduplication is just as easy — we have to ignore events for payments that are already\nregistered:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">.</span><span class=\"nf\">When</span><span class=\"p\">((</span><span class=\"k\">from</span><span class=\"p\">,</span> <span class=\"n\">@event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">!</span><span class=\"k\">from</span><span class=\"p\">.</span><span class=\"n\">RegisteredPaymentIds</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">@event</span><span class=\"p\">.</span><span class=\"n\">PaymentId</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span> <span class=\"cm\">/* ... */</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>For the sake of readability I also decided to skip a lot of other validations, which would otherwise have to be there,\nsuch as simple null checks.</p>\n\n<h3 id=\"how-to-test\">How to test</h3>\n\n<p>Testing state machines is important, because, well, ideally all code should be tested.\nIn this case, apart from the usual assurance that we are able to handle both happy paths and edge cases, we can also\nensure that we keep the transitions backwards compatible.\nAn event that is once inserted into the stream will stay there forever.</p>\n\n<p>We developed a simple DSL in F# to help us test state machines created with our framework.\nThis is a perfect solution to test a declarative definition of a state machine like the one we developed in this post.\nHere’s an example of a happy path test for our state machine:</p>\n\n<div class=\"language-fsharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[&lt;</span><span class=\"nc\">Fact</span><span class=\"p\">&gt;]</span>\n<span class=\"k\">let</span> <span class=\"n\">``Online repayment - single payment happy path``</span> <span class=\"bp\">()</span> <span class=\"p\">=</span>\n    <span class=\"p\">[</span>\n        <span class=\"nc\">When</span><span class=\"p\">(</span><span class=\"nn\">Events</span><span class=\"p\">.</span><span class=\"nc\">OnlineRepaymentCreated</span> <span class=\"p\">(</span><span class=\"s2\">\"paymentId1\"</span><span class=\"o\">))</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">GoToState</span><span class=\"p\">&lt;</span><span class=\"nc\">Created</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">DoNothing</span>\n        <span class=\"nc\">When</span><span class=\"p\">(</span><span class=\"nn\">Events</span><span class=\"p\">.</span><span class=\"nc\">OnlineRepaymentPaid</span> <span class=\"bp\">()</span><span class=\"p\">)</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">GoToState</span><span class=\"p\">&lt;</span><span class=\"nc\">Paid</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">Do</span><span class=\"p\">&lt;</span><span class=\"nc\">RegisterPaymentsCommand</span><span class=\"p\">&gt;</span>\n        <span class=\"nc\">When</span><span class=\"p\">(</span><span class=\"nn\">Events</span><span class=\"p\">.</span><span class=\"nc\">PaymentRegistered</span> <span class=\"p\">(</span><span class=\"s2\">\"paymentId1\"</span><span class=\"o\">))</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">GoToState</span><span class=\"p\">&lt;</span><span class=\"nc\">Registered</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">Do</span><span class=\"p\">&lt;</span><span class=\"nc\">SendRepaymentRegisteredEmailCommand</span><span class=\"p\">&gt;</span>\n        <span class=\"nc\">When</span><span class=\"p\">(</span><span class=\"nn\">Events</span><span class=\"p\">.</span><span class=\"nc\">PaymentCompleted</span> <span class=\"p\">(</span><span class=\"s2\">\"paymentId1\"</span><span class=\"o\">))</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">GoToState</span><span class=\"p\">&lt;</span><span class=\"nc\">Completed</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">|&gt;</span> <span class=\"nc\">DoNothing</span>\n    <span class=\"p\">]</span>\n    <span class=\"p\">|&gt;</span> <span class=\"n\">apply</span>\n</code></pre></div></div>\n\n<p>A test like this is essentially a list of events with expected side effects that are then aggregated using the <code class=\"language-plaintext highlighter-rouge\">apply</code>\nfunction that feeds them one by one into the state machine and verifies the outcome.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>I hope I was able to convince you how a framework like this can make designing complex state machines easy.\nIt provides numerous advantages, such as declarative syntax, effortless testability, thorough instrumentation and\nvisualization.</p>\n\n<p>This is precisely why state machines became an integral part of pretty much every business process architecture\nin our project.\nHaving such a robust and scalable solution for asynchronous process orchestration and isolation is crucial in\ndistributed systems.\nThe presented code, albeit extremely simplified, is from an actual state machine — one of many used in our\napplications.</p>\n\n<p>While the presented solution is a strictly internal framework right now, who knows what the future might bring?\nStay tuned!</p>\n","contentSnippet":"Coordinating complex processes, both business and technical, can be a challenging issue in a distributed system.\nEspecially when the complications associated with them, such as concurrency, idempotency, scalability and hindered\ntestability, come into play — possibly all at once.\nThis is definitely something that can keep many programmers awake at night.\nWhile this may sound dramatic, in reality there are many different solutions to this problem.\nOne group of such solutions extensively uses finite-state machines also known as finite-state automata.\nAs this article is meant for everyone, let’s start with some background information about what they are and how\nthey work.\nWhat are finite-state machines\nFor the sake of readability, I will sometimes be referring to finite-state machines as simply “state machines”.\nIf you’re already familiar with their formal definition, you may skip to the next section.\nFormally speaking, a finite-state machine is a mathematical model of computation that describes an abstract system\nhaving a finite number of permissible states. At any given point in time, the system is in exactly one of these\nstates.\nIn practical terms such a machine is described by:\nan initial (start) state,\na set of possible states,\na sequence of possible inputs (events),\na transition function which based on the last observed input and the machine’s current state, determines the next\nstate,\nand a set of terminal (end) states — optionally.\nThe machine starts off in the initial state and inspects all inputs in sequence.\nUpon observing each input, it uses the transition function to change its state.\nThe processing ends once all inputs have been observed.\nIf the machine’s state at the end of processing is one of the terminal states, the machine is assumed to accept the\ngiven input, and to reject it otherwise.\nAs a side note, the description provided above uses the deterministic model of a finite-state automaton.\nThere are also alternative, non-deterministic machines, but I won’t be delving into them too much, as they can be\nconverted to deterministic ones anyway.\nIf you’ve read this far, hopefully the rest of this post will be easier on the mind!\nDespite the intimidating formal definition, finite-state machines are more widespread than you might imagine.\nUpon closer inspection you might be able to spot them in your everyday life under the hood of things such as vending\nmachines, traffic lights and elevators.\nIn .NET they are used in the implementation of async/await or yield syntax.\nTry decompiling your code and see how the language authors implemented those features.\nYou have probably already used some sort of state machine in your code without even realising it!\nA simple example of a basic state machine implementation\nLet’s take a closer look at the following piece of code:\n\npublic enum Button\n{\n    Play,\n    Stop\n}\n\npublic enum State\n{\n    Playing,\n    NotPlaying\n}\n\npublic class Player\n{\n    public State CurrentState { get; private set; } = State.NotPlaying;\n\n    public void HandleClick(Button button)\n    {\n        if (button == Button.Play)\n        {\n            CurrentState = State.Playing;\n        }\n        else if (button == Button.Stop)\n        {\n            CurrentState = State.NotPlaying;\n        }\n    }\n}\n\n\nThis is an example of a very simple state machine with two states and two events.\nThe player can be either playing or not playing music.\nPressing the Play button will start or keep playing music, while pressing the Stop button will stop the music or keep\nit stopped.\nThe code is manageable at this point, since the example is quite straightforward.\nHowever, I hope you can imagine how adding more media controls that are usually present in music players will quickly\nresult in complex code that will not be easily maintainable anymore.\nFor instance, consider a feature request to have the Previous button change to the previous track if the player is less\nthan 3 seconds into the current track, or stay at the current track but rewind it to the beginning otherwise.\nThat being said, in many cases this kind of state machine implementation would be more than enough.\nYou don’t always have to use a state-of-the-art, bleeding-edge solution to achieve desired goals.\nHowever, this is not something I would recommend to someone who is trying to tackle coordination of asynchronous\noperations within a distributed system.\nA more maintainable approach\nLet me share our approach to this problem.\nWe have come up with a framework for building state machines in .NET with very little code that is maintainable and\ntestable.\nState machines built with this framework serve a purpose of orchestrating a wide range of business and technical\nprocesses in our microservice-based distributed architecture.\nThe framework is equipped with various features dictated by paradigms of distributed systems, which extend the\nstandard state machine definition.\nBefore I move on to an example of its real-life application, I want to break down the state machine’s API, so that you\nknow what you’re looking at later on.\nTo keep things short, I will be showing you only snippets of simplified code, as implementation details can be\nexpanded upon in follow-up posts.\nThe state machine is defined as follows:\n\npublic class StateMachine<TStateBase, TEventBase>\n{\n    public StateMachine(TStateBase initialState)\n    {\n        // ...\n    }\n}\n\n\nIt is a generic class that requires a definition of base types for all states (TStateBase) and for all transition\ntriggers (TEventBase).\nThe constructor accepts an initial state from which the state machine will start its operation.\nWe can create the state machine like so:\n\nvar stateMachine = new StateMachine<StateBase, EventBase>(new InitialState());\n\n\nHaving created this object, we may start defining transitions.\nEach transtion consists of three required elements:\nthe state from which the transition can be triggered,\nthe transition trigger (an event),\nthe state to which the transition leads.\nOptionally, a transition can have side effects, called simply commands.\nA command (or a set of commands) will be run after a successful transition.\nThose can be pretty much anything from sending a message to another state machine to calling a specific service and\ndelegating a task to it.\nCommands allow a seamless integration of the state machine with external components.\nThere is a drawback, however.\nCommand execution may fail, what requires an idempotent retry policy to be employed.\nTransitions and commands can be conditional, meaning that a logical expression can be guarding and preventing the\nexecution of the whole transition, or just a command in some cases.\nA builder pattern which combines all of the aforementioned requirements is used to compose a transition:\n\nstateMachine\n    .FromState<TStateFrom>()\n    .When<TEvent>(/* Expression<Func<TStateFrom, TEvent, bool>> */)\n    .ToState<TStateTo>(/* Expression<Func<TStateFrom, TEvent, TStateTo>> */)\n    .RunCommand(\n        when: /* Expression<Func<TStateFrom, TEvent, TStateTo, bool>> */,\n        then: /* Expression<Func<TStateFrom, TEvent, TStateTo, TCommand>> */)\n    .RunCommand(/* ... */)\n    // ...\n    .RunCommand(/* ... */);\n\n\nThis structure may be overwhelming at first, but bear with me.\nIt will all make sense in a bit.\nAs for now you need to know that:\nif the state machine is in a state of TStateFrom type,\nand an event of type TEvent occured,\nand the condition (if defined) passed to When method is satisfied,\nthe transition will fire up and the state machine will switch to a new state of type TStateTo using the factory method\nexpression passed to ToState method.\nThe state machine class exposes a method which can be used to trigger a transition with an event:\n\npublic TransitionResult Apply(TEventBase @event);\n\n\nThis method applies the supplied event to the current state by trying to find a matching transition in the transition\nmapping and changes the internal state of the machine.\nThe result contains information about the performed transition, along with commands that should be run.\n\npublic class TransitionResult\n{\n    public TStateBase StateFrom { get; }\n    public TEventBase Event { get; }\n    public TStateBase StateTo { get; }\n    public IEnumerable<object> Commands { get; }\n    public bool IsValid { get; }\n}\n\n\nIf no matching transition definition is found given the machine’s current state – or if a transition is found, but its\nprecondition is not met – the event application will result in an invalid transition.\nIn that case, the state machine will not react to the event and simply retain its state, possibly logging that an\ninvalid event was received.\nIf there are multiple matching transitions, the first one will fire up (in definition order).\nWe should, however, avoid designing states machines in such way if possible.\nAs you can see, the representation of the machine is primarily type-based, so we can use polymorphism to our advantage.\nBy calling FromState<TStateBase>() we can have a transition that can be fired up from any state.\nSimilarily, if we use a type that only some selected states derive from, we will have a transition applicable to these\nstates only.\nIt would be equivalent to duplicating that same transition for every one of these states.\nThis syntax can be particularly useful, when dealing with processes that have an expiration date and have to be\ncompleted within a specific time frame.\nReceiving an event about the process’ expiration may have to be handled regardless of the machine’s current state and\nresult in termination immediately.\nImplementation manifest\nNow that I’ve described how a state machine can be defined in a declarative way using our framework, let’s talk a bit\nabout how that definition actually runs.\nIn general, we use dependency injection to make the state machine definition work with other services and add-ons,\nsuch as specific command runners.\nI promised I would not dive deep into implementation details, but nonetheless I want to give you a little taste of\nwhat sits behind the scenes.\nIf you don’t care for any of that, you may skip to the “Real-life example” section.\nStorage\nThe state machine implementation is based on event sourcing.\nIn summary, this means that we don’t save the state of our application objects, but rather a series of events that\nchange the object’s state.\nThese events will give us the current view of the object when aggregated (“replayed”) in the order in which they\noccured.\nFor this purpose we currently use an open-source library,\nSQLStreamStore.\nSQLStreamStore offers an atomic and idempotent stream append operation.\nThanks to this, we don’t have to worry about race conditions between multiple instances of the same state machine\nhandling events in parallel, what is great for scalability.\nWe can also recognize a situation when the same event is being fed into the state machine again, what can happen\nwhen dealing with retry policies.\nThat, on the other hand, gives us a pretty good way of achieving deduplication.\nCaching\nReplaying all events every single time is an unnecessary overhead that we decided to mitigate by introducing\na lock-free cache for state snapshots.\nAfter each transition a state machine will cache its current state along with the stream version which it\ncorresponds to.\nThis gives us the ability to restore the state machine to the state it was in after handling n-1 events, when we want\nto handle the n-th event.\nIt requires, however, the states to be immutable, or else we may end up with an unexpected behaviour.\nIf states were not immutable, we could not be certain that the state object we cached after handling the n-th event\nis still the same and has not been modified in the meantime.\nMoreover, immutable objects are inherently thread-safe.\nInstrumentation\nThis state machine framework is also equipped with heavy instrumentation.\nEvery executed transition and state change is logged, so we can easily track any errors.\nThis data is also useful for our data analytics team to keep track of business processes.\nA lot of different metrics come into play to measure performance of each and every state machine deployed.\nFinally, every historical transition is saved in a stream — separate from the event stream — and can be viewed with our\ninternal back-office tools.\nThanks to the finite nature of the state machines, we can always log the current state and trace what made the system\nto be in that state, along with all its previous states.\nThis is something quite invaluable and helps immensely when diagnosing issues, especially in complex and\ninter-dependent business scenarios where a lot of things happen at the same time.\nReal-life example\nSo finally, the big question: how is this framework used on our platform?\nTo answer that we don’t need to reach far.\nIn July of 2020 we launched a new payment method called Allegro Pay, which will eventually be available to every buyer\non Allegro.\nThis service allows the users to buy items now and pay for them later in a single payment after 30 days, or\nin multiple smaller monthly payments, depending on the value of purchased goods.\nRepayments can be easily made online using our Allegro Pay dashboard.\nUsers are even able to pay for multiple purchases at once.\n\nFor more detailed information, I encourage you to read our\nAllegro Pay FAQ.\nI suspect you already know where I’m going with this — my goal is to show you how our state machine framework is used\nto coordinate an actual business process of handling a repayment within Allegro Pay.\nThe process specification\nBefore we create our state machine, we need to have a rough idea of which states and events we want to handle.\nThe repayment process is started in two different ways, but will end alike in both cases.\nThe user can initialize an immediate online repayment via the Allegro Pay dashboard.\n They are redirected to the payment provider’s website and complete the process there.\nAlternatively, the user can request to repay their purchase with a traditional wire transfer, what we call an\noffline repayment.\n We know nothing about it until the money actually arrives at the target bank account.\n That method may take up to a couple of days.\nAt this point both repayment paths merge, since from now on we can discard any knowledge about how the money\nwas received and focus on the fact that we have it.\nThe money source won’t be useful during the process coordination anymore.\nThe next step is to register the repayment in our bookkeeping system.\nThe registration part is important for us, because it will tell us whether the purchase was paid in full or if further\nrepayments are required.\nAfter receiving information about successful registration, an email is sent to the user confirming that the\nrepayment was registered.\nAfter repayment is registered, we asynchronously await the feedback from the bookkeeping system on the transaction\nbeing settled and the repayment is to be marked as completed.\nDesigning the state machine\nI could show you the finished state machine and just paste a wall of text here, describing what it does, but where’s\nthe fun in that?\nInstead, I’d like to show you the step-by-step process I would go through when designing this kind of state machine.\nI’ll start off by simply creating a state machine that handles a repayment of a single purchase and then extend it\nto work for all cases.\nFirst we need to define the base types for all states and events:\n\npublic abstract class StateBase\n{\n    public string UserId { get; init; }\n    public string RepaymentId { get; init; }\n    public string PaymentId { get; init; }\n\n    public StateBase(StateBase other)\n    {\n        if (other == null) return;\n\n        UserId = other.UserId;\n        RepaymentId = other.RepaymentId;\n        PaymentId = other.PaymentId;\n    }\n}\n\npublic abstract class EventBase { }\n\n\nAs you can see, I already equipped the base state with all the properties we will need later to orchestrate this\nprocess:\nUserId — tells us who is repaying,\nRepaymentId — uniquely identifies the repayment process,\nPaymentId — identifies the payment made by the user for this repayment.\nAs for the event base, we don’t need anything special there, so it’s empty.\nStateBase class features a copy constructor, which rewrites all properties from the previous state when creating\na new one.\nNone of the states will have any special properties, so there’s no point in painstakingly showing all individual\nsubclasses representing each state.\nHere are just a few sample classes of the initial state (NotStarted) and one of the subsequent states:\n\npublic class NotStarted : StateBase\n{\n    public NotStarted() : base(null) { }\n}\n\npublic class Created : StateBase\n{\n    public Created(StateBase other) : base(other) { }\n}\n\n\nAll of the remaining states are defined similarly to Created state.\nThose states are:\nPaid,\nFailed,\nRegistered,\nCompleted.\nOnce we have our states, we can focus on events and introduce transitions, one by one.\nWe’ll start by handling an online repayment.\nIt begins with the user creating a repayment entity by selecting a payment in the Allegro Pay dashboard.\nThis generates an event, let’s call it OnlineRepaymentCreated:\n\npublic class OnlineRepaymentCreated : EventBase\n{\n    public string UserId { get; init; }\n    public string RepaymentId { get; init; }\n    public string PaymentId { get; init; }\n}\n\n\nWe want this event to trigger a transition from NotStarted to Created state.\n\n// 1. NotStarted : OnlineRepaymentCreated -> Created\nstateMachine\n    .FromState<NotStarted>()\n    .When<OnlineRepaymentCreated>()\n    .ToState<Created>((from, @event) => new Created(from)\n    {\n        UserId = @event.UserId,\n        RepaymentId = @event.RepaymentId,\n        PaymentId = @event.PaymentId\n    });\n\n\nAt this point the user sees the repayment form, where they select a payment method.\nThey are then redirected to the payment provider’s website to finish the repayment.\nIn most cases it will succeed, but in some it fails due to a multitude of reasons, such as insufficient\nfunds on the account or the user providing wrong confirmation code.\nTherefore, we need two events:\n\npublic class OnlineRepaymentPaid : EventBase { }\n\npublic class OnlineRepaymentFailed : EventBase { }\n\n\nWe could go about a single event called RepaymentResult with an enum property indicating a success or a failure, but\nin my opinion the former approach is cleaner and more open to future changes.\nThese events will play a role in tranistions no. 2 and 3:\n\n// 2. Created : OnlineRepaymentPaid -> Paid\nstateMachine\n    .FromState<Created>()\n    .When<OnlineRepaymentPaid>()\n    .ToState<Paid>((from, @event) => new Paid(from))\n    .RunCommand((from, @event, to) => new RegisterPaymentCommand(to.PaymentId));\n\n// 3. Created : OnlineRepaymentFailed -> Failed\nstateMachine\n    .FromState<Created>()\n    .When<OnlineRepaymentFailed>()\n    .ToState<Failed>((from, @event) => new Failed(from));\n\n\nYou might notice that transition no. 2 has a command that I didn’t mention earlier specified.\nIt’s a simple class wrapping the payment identifier, which is interpreted by the command runner as a request to our\nbookkeeping system for registering this payment.\nThis concludes the online path and we can move on to the offline repayment.\nIt is significantly easier, since we are simply notified that the money has been transferred to us.\nBecause of this, we can completely skip the Created state and go straight to Paid.\nWe need an event called OfflineRepaymentPaid which contains the same properties as OnlineRepaymentCreated:\n\npublic class OfflineRepaymentPaid : EventBase\n{\n    public string UserId { get; init; }\n    public string RepaymentId { get; init; }\n    public string PaymentId { get; init; }\n}\n\n\nLet’s use it in the fourth transition that will once again call the registration command:\n\n// 4. NotStarted : OfflineRepaymentPaid -> Paid\nstateMachine\n    .FromState<NotStarted>()\n    .When<OfflineRepaymentPaid>()\n    .ToState<Paid>((from, @event) => new Paid(from)\n    {\n        UserId = @event.UserId,\n        RepaymentId = @event.RepaymentId,\n        PaymentId = @event.PaymentId\n    })\n    .RunCommand((from, @event, to) => new RegisterPaymentCommand(@event.PaymentId));\n\n\nThis is where both repayment types merge and we can focus on our bookkeeping system.\nAs mentioned before, we are mostly interested in registration events published by the bookkeeping system.\n\npublic class PaymentRegistered : EventBase\n{\n    public string PaymentId { get; init; }\n}\n\n\nOnce we know that a payment is registered in our bookkeeping system, we are able to send an email to the user\nsummarizing what they paid for and follow-up information whether they still have more payments to be made.\nThis can be done with a transition like this:\n\n// 5. Paid : PaymentRegistered -> Registered\nstateMachine\n    .FromState<Paid>()\n    .When<PaymentRegistered>()\n    .ToState<Registered>((from, @event) => new Registered(from))\n    .RunCommand((from, @event, to) => new SendRepaymentRegisteredEmailCommand(to.UserId, to.RepaymentId));\n\n\nAgain, SendRepaymentRegisteredEmailCommand is a simple class wrapping two properties that will be interpreted by the\ncommand runner and result in an email sent to the user.\nThe last step is to wait for the final event PaymentCompleted.\nTheoretically it could be omitted in this state machine, but it’s useful for auditing purposes.\n\npublic class PaymentCompleted : EventBase\n{\n    public string PaymentId { get; init; }\n}\n\n\nIt’s time to create the final transition:\n\n// 6. Registered : PaymentCompleted -> Completed\nstateMachine\n    .FromState<Registered>()\n    .When<PaymentCompleted>()\n    .ToState<Completed>((from, @event) => new Completed(from));\n\n\nAnd we’re done!\nRight?\nNot really.\nAs is usually the case with event-sourced systems, the order of incoming events can’t always be relied on.\nThe bookkeeping system will sometimes — for reasons I don’t want to delve into — publish events PaymentRegistered and\nPaymentCompleted at the same time.\nDue to a lack of message ordering guarantees, it’s possible for us to receive PaymentCompleted event before\nPaymentRegistered.\nThe current definition of the state machine is not prepared for that.\nFortunately, the fix is quite easy, as we can simply introduce two more transitions:\n\n// 7. Paid : PaymentCompleted -> Completed\nstateMachine\n    .FromState<Paid>()\n    .When<PaymentCompleted>()\n    .ToState<Completed>((from, @event) => new Completed(from));\n\n// 8. Completed : PaymentRegistered -> Completed\nstateMachine\n    .FromState<Completed>()\n    .When<PaymentRegistered>()\n    .ToState<Completed>((from, @event) => new Completed(from))\n    .RunCommand((from, @event, to) => new SendRepaymentRegisteredEmailCommand(to.UserId, to.RepaymentId));\n\n\nIn this scenario we completely skip Registered state, but that’s something we just have to deal with.\nEvents are important from analytics and diagnostics standpoints, states — not so much.\nThat wraps up the event flow for this scenario.\nIt can be visualized with a diagram like this:\n\nOur state machine framework is equipped with a pretty useful visualisation extension.\nIt’s a pretty neat tool that makes it easy to figure out how the state machine works, without having to delve into the\ncode.\nA simple unit test that calls this extension can render a state machine diagram like one above using PlantUML\nsyntax, which in this case would go as follows:\n\n@startuml\nhide empty description\n[*] --> NotStarted\nNotStarted --> Created: <b>OnlineRepaymentCreated</b>\nCreated --> Paid: <b>OnlineRepaymentPaid</b>\\n<i>then:</i> RegisterPaymentCommand\nCreated --> Failed: <b>OnlineRepaymentFailed</b>\nNotStarted --> Paid: <b>OfflineRepaymentPaid</b>\\n<i>then:</i> RegisterPaymentCommand\nPaid --> Registered: <b>PaymentRegistered</b>\\n<i>then:</i> SendRepaymentRegisteredEmailCommand\nRegistered --> Completed: <b>PaymentCompleted</b>\nPaid --> Completed: <b>PaymentCompleted</b>\nCompleted --> Completed: <b>PaymentRegistered</b>\\n<i>then:</i> SendRepaymentRegisteredEmailCommand\n@enduml\n\n\nHowever, recall that this is just a state machine to handle a repayment for a single payment selected by the user.\nI promised we would extend it to handle multiple payments.\nLet’s do that.\nFirst we’ll extend the base state definition:\n\npublic abstract class StateBase\n{\n    public string UserId { get; init; }\n    public string RepaymentId { get; init; }\n    public HashSet<string> PaymentIds { get; init; }\n    public HashSet<string> RegisteredPaymentIds { get; init; }\n    public HashSet<string> CompletedPaymentIds { get; init; }\n\n    public StateBase(StateBase other)\n    {\n        if (other == null) return;\n\n        UserId = other.UserId;\n        RepaymentId = other.RepaymentId;\n        PaymentIds = new HashSet<string>(other.PaymentIds);\n        RegisteredPaymentIds = new HashSet<string>(other.RegisteredPaymentIds);\n        CompletedPaymentIds = new HashSet<string>(other.CompletedPaymentIds);\n    }\n}\n\n\nThree things have changed:\nPaymentId changed from a string to a HashSet<string> and is now called PaymentIds to represent multiple\npayments selected by the user,\na HashSet<string> called RegisteredPaymentIds was added to keep track of registered payments,\na HashSet<string> called CompletedPaymentIds was added to keep track of completed payments.\nWe also have to modify OnlineRepaymentCreated event by introducing a collection of payment identifiers, like so:\n\npublic class OnlineRepaymentCreated : EventBase\n{\n    public string UserId { get; init; }\n    public string RepaymentId { get; init; }\n    public IEnumerable<string> PaymentIds { get; init; }\n}\n\n\nBecause of this, we need to introduce a small change to transition no. 1:\n\n// 1'. NotStarted : OnlineRepaymentCreated -> Created\nstateMachine\n    .FromState<NotStarted>()\n    .When<OnlineRepaymentCreated>()\n    .ToState<Created>((from, @event) => new Created(from)\n    {\n        UserId = @event.UserId,\n        RepaymentId = @event.RepaymentId,\n        PaymentIds = new HashSet<string>(@event.PaymentIds)\n    });\n\n\nTransition no. 2 is similarly adjusted to these changes by passing the set of payment identifiers to the\nbookkeeping system:\n\n(from, @event, to) => new RegisterPaymentsCommand(to.PaymentIds)\n\n\nNow we can move to the remaining transitions.\nTransition no. 5 has to be split into two.\nWe want to stay in the Paid state until all registration events are received and only then switch to Registered.\nThis can be achieved with:\n\n// 5'. Paid : PaymentRegistered -> Paid\nstateMachine\n    .FromState<Paid>()\n    .When<PaymentRegistered>((from, @event) => !from.PaymentIds.All(\n        id => from.RegisteredPaymentIds.Contains(id) || id == @event.PaymentId))\n    .ToState<Paid>((from, @event) =>\n    {\n        var to = new Paid(from);\n        to.RegisteredPaymentIds.Add(@event.PaymentId);\n        return to;\n    });\n\n// 5''. Paid : PaymentRegistered -> Registered\nstateMachine\n    .FromState<Paid>()\n    .When<PaymentRegistered>((from, @event) => from.PaymentIds.All(\n        id => from.RegisteredPaymentIds.Contains(id) || id == @event.PaymentId))\n    .ToState<Registered>((from, @event) =>\n    {\n        var to = new Registered(from);\n        to.RegisteredPaymentIds.Add(@event.PaymentId);\n        return to;\n    });\n    .RunCommand((from, @event, to) => new SendRepaymentRegisteredEmailCommand(to.UserId, to.RepaymentId));\n\n\nAs you can see, the command is now defined only for the second transition that triggers after all payments are\nregistered.\nWe have to slightly adjust transition no. 8, which is responsible for sending the email, too:\n\n// 8'. Completed : PaymentRegistered -> Completed\nstateMachine\n    .FromState<Completed>()\n    .When<PaymentRegistered>()\n    .ToState<Completed>((from, @event) =>\n    {\n        var to = new Completed(from);\n        to.RegisteredPaymentIds.Add(@event.PaymentId);\n        return to;\n    })\n    .RunCommand(\n        when: (from, @event, to) => to.PaymentIds.SetEquals(to.RegisteredPaymentIds),\n        then: (from, @event, to) => new SendRepaymentRegisteredEmailCommand(to.UserId, to.RepaymentId));\n\n\nThis time the transition is not conditional, however the command is.\nIt will execute only after we handle final registration event and the payment identifier sets PaymentIds and\nRegisteredPaymentIds become equal.\nWe cannot forget about all transitions that are triggered by PaymentCompleted event.\nThose will have to be changed like so:\n\n// 6'. Registered : PaymentCompleted -> Registered\nstateMachine\n    .FromState<Registered>()\n    .When<PaymentCompleted>((from, @event) => !from.PaymentIds.All(\n        id => from.CompletedPaymentIds.Contains(id) || id == @event.PaymentId))\n    .ToState<Registered>((from, @event) =>\n    {\n        var to = new Registered(from);\n        to.CompletedPaymentIds.Add(@event.PaymentId);\n        return to;\n    });\n\n// 6''. Registered : PaymentCompleted -> Completed\nstateMachine\n    .FromState<Registered>()\n    .When<PaymentCompleted>((from, @event) => from.PaymentIds.All(\n        id => from.CompletedPaymentIds.Contains(id) || id == @event.PaymentId))\n    .ToState<Completed>((from, @event) =>\n    {\n        var to = new Completed(from);\n        to.CompletedPaymentIds.Add(@event.PaymentId);\n        return to;\n    });\n\n// 7'. Paid : PaymentCompleted -> Paid\nstateMachine\n    .FromState<Paid>()\n    .When<PaymentCompleted>((from, @event) => !from.PaymentIds.All(\n        id => from.CompletedPaymentIds.Contains(id) || id == @event.PaymentId))\n    .ToState<Completed>((from, @event) =>\n    {\n        var to = new Completed(from);\n        to.CompletedPaymentIds.Add(@event.PaymentId);\n        return to;\n    });\n\n// 7''. Paid : PaymentCompleted -> Completed\nstateMachine\n    .FromState<Paid>()\n    .When<PaymentCompleted>((from, @event) => from.PaymentIds.All(\n        id => from.CompletedPaymentIds.Contains(id) || id == @event.PaymentId))\n    .ToState<Completed>((from, @event) =>\n    {\n        var to = new Completed(from);\n        to.CompletedPaymentIds.Add(@event.PaymentId);\n        return to;\n    });\n\n\nAnd we’re done!\nThis time for real.\nAfter all this work we ended up with something that can be visualized with a diagram like this:\n\nI mentioned earlier that we have internal back-office tools to view state machines and their transition history.\nHere is an example view of a repayment process that was coordinated with the state machine we defined above (sensitive\ndata was redacted, since this was taken in production):\n\nCaveats\nYou may have noticed some problems here.\nWhat would happen if we received an event with a wrong payment identifier?\nRight now the state machine is not ready for that.\nHowever, that can be remedied relatively easily by adding another condition to When methods of all transitions for\nPaymentRegistered and PaymentCompleted events, such as:\n\n.When((from, @event) => from.PaymentIds.Contains(@event.PaymentId) && /* ... */)\n\n\nThis would essentialy ensure that we react only to events with correct identifiers.\nAnd what about retries and duplicated events?\nTransition no. 8’ is especially susceptible to that, because it may result in the email being sent to the user twice.\nAnd we don’t want that!\nFortunately, achieving deduplication is just as easy — we have to ignore events for payments that are already\nregistered:\n\n.When((from, @event) => !from.RegisteredPaymentIds.Contains(@event.PaymentId) && /* ... */)\n\n\nFor the sake of readability I also decided to skip a lot of other validations, which would otherwise have to be there,\nsuch as simple null checks.\nHow to test\nTesting state machines is important, because, well, ideally all code should be tested.\nIn this case, apart from the usual assurance that we are able to handle both happy paths and edge cases, we can also\nensure that we keep the transitions backwards compatible.\nAn event that is once inserted into the stream will stay there forever.\nWe developed a simple DSL in F# to help us test state machines created with our framework.\nThis is a perfect solution to test a declarative definition of a state machine like the one we developed in this post.\nHere’s an example of a happy path test for our state machine:\n\n[<Fact>]\nlet ``Online repayment - single payment happy path`` () =\n    [\n        When(Events.OnlineRepaymentCreated (\"paymentId1\"))\n            |> GoToState<Created>\n            |> DoNothing\n        When(Events.OnlineRepaymentPaid ())\n            |> GoToState<Paid>\n            |> Do<RegisterPaymentsCommand>\n        When(Events.PaymentRegistered (\"paymentId1\"))\n            |> GoToState<Registered>\n            |> Do<SendRepaymentRegisteredEmailCommand>\n        When(Events.PaymentCompleted (\"paymentId1\"))\n            |> GoToState<Completed>\n            |> DoNothing\n    ]\n    |> apply\n\n\nA test like this is essentially a list of events with expected side effects that are then aggregated using the apply\nfunction that feeds them one by one into the state machine and verifies the outcome.\nSummary\nI hope I was able to convince you how a framework like this can make designing complex state machines easy.\nIt provides numerous advantages, such as declarative syntax, effortless testability, thorough instrumentation and\nvisualization.\nThis is precisely why state machines became an integral part of pretty much every business process architecture\nin our project.\nHaving such a robust and scalable solution for asynchronous process orchestration and isolation is crucial in\ndistributed systems.\nThe presented code, albeit extremely simplified, is from an actual state machine — one of many used in our\napplications.\nWhile the presented solution is a strictly internal framework right now, who knows what the future might bring?\nStay tuned!","guid":"https://blog.allegro.tech/2021/03/state-machines-made-easy.html","categories":["tech","dotnet","state_machine","allegro_pay"],"isoDate":"2021-03-04T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"My first days at Allegro","link":"https://blog.allegro.tech/2021/02/first-days-at-allegro.html","pubDate":"Mon, 15 Feb 2021 00:00:00 +0100","authors":{"author":[{"name":["Krzysztof Przychodzki"],"photo":["https://blog.allegro.tech/img/authors/krzysztof.przychodzki.jpg"],"url":["https://blog.allegro.tech/authors/krzysztof.przychodzki"]}]},"content":"<p>So you’re new to <a href=\"https://blog.allegro.tech/about-us/\">Allegro</a>, have just finished your tech onboarding and are stunned with information overflow? Or perhaps you\nare planning to join Allegro and don’t know what it looks like in here? I am about to try and describe how I felt just a few months ago and what startled or\ndismayed me. I hope this short article will answer all your concerns.</p>\n\n<p>But first I would like to give you a little background of my professional work life.</p>\n\n<h2 id=\"background\">Background</h2>\n\n<p>Long before becoming a developer, I was a chemical engineer, and I was designing distilleries, cosmetic and oil refinery plants, etc. During my work, I often\nused Microsoft Excel and VBA as my main apps for solving complex problems. I enjoyed it more than the job I was assigned. So I decided to take a Java bootcamp\nand afterwards I got hired by an IT company in my area. At my first IT job, I was hired as a junior, but I was already treated as a regular programmer.\nIt was nice, I owe them a lot, but on the other hand the only feedback I got was when something was not working. From the beginning, I was fully aware of how\nbasic my knowledge was after the bootcamp. While catching up I realized that at this company I would not develop anymore, and I would be working with legacy\ntechnologies throughout the rest of my career.</p>\n\n<h2 id=\"a-piece-of-cake\">A piece of cake?</h2>\n\n<p>The recruitment process at Allegro — let me tell you straight, is not a piece of cake. I am pretty sure that a year after the recruitment meeting you are\nstill going to remember the questions you were torpedoed with.</p>\n\n<p>First of all — after applying, you will receive an email with all the necessary information about the recruitment process. Each step is briefly\ncharacterized, so you know what is going to happen next and what to expect. The first step is a task on DevSkiller. Then, you will take part in technical\ninterviews in the form of conversation about the technologies and architecture of modern IT systems, touching on aspects of design, performance, monitoring, etc.\nIt was very different from the previous recruitment processes in which I sometimes spoke to people who had no clue what I was talking about. At Allegro I really\nappreciate that these meetings are with real professionals! What is more, during my recruitments I have never encountered such a human approach. They treat you\nlike a human, not like a robot. That’s cool. In the last step you will meet with a team leader and people from HR.</p>\n\n<h2 id=\"first-days\">First days</h2>\n\n<p>My first days at Allegro — what a rollercoaster, considering the current coronavirus situation. Onboarding normally takes 3 days and is conducted at the\ncompany’s headquarters in Poznań. There is another two-day long technical onboarding for technical employees at the workplace. However, due to the COVID-19\nsituation, the entire onboarding process was carried out remotely. This tech onboarding is conducted with a workshop on how to create a new service and\neverything that goes with it like deploying, running and maintaining. I understood why (this was not possible remotely), but it is a pity that it did not take\nplace. Fortunately, everybody wants to help you with any issue you have — and this is the great power of Allegro: people and their readiness to help.\nIt is natural for everyone that a new person needs support and time to get to know the organization. Moreover, if you are a junior like me, and have never\nwritten a line of code for example in Kotlin, you can spend some time learning a new programming language and everybody is okay with that.</p>\n\n<p>Someone might ask: What is difficult in the beginning? That depends, because everything is new. I work in a team responsible for Allegro Smart! loyalty\nprogramme — ensuring proper marking of offers qualified for free delivery — so the most confusing thing for me was the business complexity of those\nprocesses.</p>\n\n<p>Nevertheless, there are over 1200 microservices communicating with each other — a status quo you have to deal with. Thousands of decisions were made and\na lot of them don’t sound reasonable when you first hear about them, but after a day passes, everything starts to clarify. I think this is what everyone deals\nwith when they come to a new place.</p>\n\n<h2 id=\"somebody-is-reading-my-code\">Somebody is reading my code</h2>\n\n<p>One of my favorite things at Allegro is code review. Virtually nothing gets merged unless it is reviewed and approved. Code review is mandatory and necessary\n— reading others’ code is not only about finding bugs, it is mainly to provide code that is clear, understandable, and maintainable. For me, it is mainly\nfor learning and better understanding our services and business domain.</p>\n\n<p>Another great thing is pair programming. During these sessions it is easier to understand the business domain and to catch the wider context of our services.</p>\n\n<h2 id=\"unit-integration-and-end-to-end-testing\">Unit, integration, and end-to-end testing</h2>\n\n<p>As I wrote, unreviewed code will not be deployed to production and without tests it is not going to pass the review. At Allegro, each change in code needs\nto be tested. We write unit and integration tests, and we work with two test environments.</p>\n\n<p>One is totally a developer’s playground where you make your ‘little Allegro’. It is called phoenix. Every team has its own phoenix env for\nexperiments. However, it has some issues. Since there are so many dependencies to other services, your already set up environment may not work properly until it\nis manually updated. So a very common situation is that before you start testing your change, you need to spend some time to get the whole environment working.\nThis is frustrating, especially in the beginning.</p>\n\n<p>The second one is a pre-prod sandbox — it is like normal Allegro, but unlike the dev environment, the sandbox is more consistent and works almost like\nprod. So there are a lot of possibilities to test your change and it’s good to have this feeling of confidence.</p>\n\n<p>Sometimes despite all these tests, code reviews, etc. a mistake happens — the app is already deployed to production, and our clients are complaining.\nWe have to act quickly to fix the error. I really appreciate that we look for bugs, not the guilty party. When somebody makes a mistake, we don’t blame each\nother, but we look for the best solution to the problem and fix it.</p>\n\n<h2 id=\"hack-the-day\">Hack the day</h2>\n\n<p>Sometimes teams do internal hackathons (called fedex-days) — we divide into two or three teams and we work on subjects that we choose. We want\nto try a new programming language — we just do it; make an application for sharing memes — perfectly fine; write an extension for Slack — why\nnot, go have some fun! Usually, we spend two working days getting off work. That’s very refreshing.</p>\n\n<p>I also know that once in a while there are hackathons for the whole Allegro — but I didn’t have a chance to participate.</p>\n\n<h2 id=\"dobrze-tu-być\">Dobrze tu być?</h2>\n\n<p>At Allegro we all understand the great importance of ensuring the code we are working on is of the highest quality. We care about our services to the point\nwhere we sometimes spend hours discussing if it is better to throw an exception or just 404?</p>\n\n<p>However, Allegro is not only about programming, it is a place with a lot of experts in many other disciplines — and every one of us has a straightforward\ngoal to make Allegro the best place/platform not only for shoppers and sellers, but also for each other.</p>\n\n<p>Hope you enjoyed this article. I know it sounds like a chorus of praise, but in my situation it arises from my work experiences — for me, it is really a\n“Good to be here!” place. Or as we say <a href=\"https://www.linkedin.com/company/allegro-pl/life/team\">#dobrzetubyć</a>.</p>\n","contentSnippet":"So you’re new to Allegro, have just finished your tech onboarding and are stunned with information overflow? Or perhaps you\nare planning to join Allegro and don’t know what it looks like in here? I am about to try and describe how I felt just a few months ago and what startled or\ndismayed me. I hope this short article will answer all your concerns.\nBut first I would like to give you a little background of my professional work life.\nBackground\nLong before becoming a developer, I was a chemical engineer, and I was designing distilleries, cosmetic and oil refinery plants, etc. During my work, I often\nused Microsoft Excel and VBA as my main apps for solving complex problems. I enjoyed it more than the job I was assigned. So I decided to take a Java bootcamp\nand afterwards I got hired by an IT company in my area. At my first IT job, I was hired as a junior, but I was already treated as a regular programmer.\nIt was nice, I owe them a lot, but on the other hand the only feedback I got was when something was not working. From the beginning, I was fully aware of how\nbasic my knowledge was after the bootcamp. While catching up I realized that at this company I would not develop anymore, and I would be working with legacy\ntechnologies throughout the rest of my career.\nA piece of cake?\nThe recruitment process at Allegro — let me tell you straight, is not a piece of cake. I am pretty sure that a year after the recruitment meeting you are\nstill going to remember the questions you were torpedoed with.\nFirst of all — after applying, you will receive an email with all the necessary information about the recruitment process. Each step is briefly\ncharacterized, so you know what is going to happen next and what to expect. The first step is a task on DevSkiller. Then, you will take part in technical\ninterviews in the form of conversation about the technologies and architecture of modern IT systems, touching on aspects of design, performance, monitoring, etc.\nIt was very different from the previous recruitment processes in which I sometimes spoke to people who had no clue what I was talking about. At Allegro I really\nappreciate that these meetings are with real professionals! What is more, during my recruitments I have never encountered such a human approach. They treat you\nlike a human, not like a robot. That’s cool. In the last step you will meet with a team leader and people from HR.\nFirst days\nMy first days at Allegro — what a rollercoaster, considering the current coronavirus situation. Onboarding normally takes 3 days and is conducted at the\ncompany’s headquarters in Poznań. There is another two-day long technical onboarding for technical employees at the workplace. However, due to the COVID-19\nsituation, the entire onboarding process was carried out remotely. This tech onboarding is conducted with a workshop on how to create a new service and\neverything that goes with it like deploying, running and maintaining. I understood why (this was not possible remotely), but it is a pity that it did not take\nplace. Fortunately, everybody wants to help you with any issue you have — and this is the great power of Allegro: people and their readiness to help.\nIt is natural for everyone that a new person needs support and time to get to know the organization. Moreover, if you are a junior like me, and have never\nwritten a line of code for example in Kotlin, you can spend some time learning a new programming language and everybody is okay with that.\nSomeone might ask: What is difficult in the beginning? That depends, because everything is new. I work in a team responsible for Allegro Smart! loyalty\nprogramme — ensuring proper marking of offers qualified for free delivery — so the most confusing thing for me was the business complexity of those\nprocesses.\nNevertheless, there are over 1200 microservices communicating with each other — a status quo you have to deal with. Thousands of decisions were made and\na lot of them don’t sound reasonable when you first hear about them, but after a day passes, everything starts to clarify. I think this is what everyone deals\nwith when they come to a new place.\nSomebody is reading my code\nOne of my favorite things at Allegro is code review. Virtually nothing gets merged unless it is reviewed and approved. Code review is mandatory and necessary\n— reading others’ code is not only about finding bugs, it is mainly to provide code that is clear, understandable, and maintainable. For me, it is mainly\nfor learning and better understanding our services and business domain.\nAnother great thing is pair programming. During these sessions it is easier to understand the business domain and to catch the wider context of our services.\nUnit, integration, and end-to-end testing\nAs I wrote, unreviewed code will not be deployed to production and without tests it is not going to pass the review. At Allegro, each change in code needs\nto be tested. We write unit and integration tests, and we work with two test environments.\nOne is totally a developer’s playground where you make your ‘little Allegro’. It is called phoenix. Every team has its own phoenix env for\nexperiments. However, it has some issues. Since there are so many dependencies to other services, your already set up environment may not work properly until it\nis manually updated. So a very common situation is that before you start testing your change, you need to spend some time to get the whole environment working.\nThis is frustrating, especially in the beginning.\nThe second one is a pre-prod sandbox — it is like normal Allegro, but unlike the dev environment, the sandbox is more consistent and works almost like\nprod. So there are a lot of possibilities to test your change and it’s good to have this feeling of confidence.\nSometimes despite all these tests, code reviews, etc. a mistake happens — the app is already deployed to production, and our clients are complaining.\nWe have to act quickly to fix the error. I really appreciate that we look for bugs, not the guilty party. When somebody makes a mistake, we don’t blame each\nother, but we look for the best solution to the problem and fix it.\nHack the day\nSometimes teams do internal hackathons (called fedex-days) — we divide into two or three teams and we work on subjects that we choose. We want\nto try a new programming language — we just do it; make an application for sharing memes — perfectly fine; write an extension for Slack — why\nnot, go have some fun! Usually, we spend two working days getting off work. That’s very refreshing.\nI also know that once in a while there are hackathons for the whole Allegro — but I didn’t have a chance to participate.\nDobrze tu być?\nAt Allegro we all understand the great importance of ensuring the code we are working on is of the highest quality. We care about our services to the point\nwhere we sometimes spend hours discussing if it is better to throw an exception or just 404?\nHowever, Allegro is not only about programming, it is a place with a lot of experts in many other disciplines — and every one of us has a straightforward\ngoal to make Allegro the best place/platform not only for shoppers and sellers, but also for each other.\nHope you enjoyed this article. I know it sounds like a chorus of praise, but in my situation it arises from my work experiences — for me, it is really a\n“Good to be here!” place. Or as we say #dobrzetubyć.","guid":"https://blog.allegro.tech/2021/02/first-days-at-allegro.html","categories":["tech"],"isoDate":"2021-02-14T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Implement stateless authentication like a pro using OAuth: A 100% correct approach","link":"https://blog.allegro.tech/2021/02/oauth-stateless-login.html","pubDate":"Mon, 01 Feb 2021 00:00:00 +0100","authors":{"author":[{"name":["Karol Kuc"],"photo":["https://blog.allegro.tech/img/authors/karol.kuc.jpg"],"url":["https://blog.allegro.tech/authors/karol.kuc"]}]},"content":"<p>Many of us spend most of their software development careers improving and extending applications protected by pre-existing security mechanisms. That’s why\nwe rarely address problems related directly to authentication and authorization unless we build apps from scratch.\nRegardless of your experience I still hope you will find this article interesting.\nIt’s not meant to be a tutorial. I would like to focus on clarifying basic concepts and highlighting common misconceptions.</p>\n\n<h4 id=\"alpha-disclaimer\">Alpha disclaimer:</h4>\n<p>Sorry to disappoint you, but the title of this article is just a cheap click-bait.\nIt doesn’t matter whether you started reading because you disagree with\nthe title or because you hoped to find the holy grail\nof securing web applications. There is a chance you will find something for yourself anyway.</p>\n\n<h4 id=\"beta-disclaimer\">Beta disclaimer:</h4>\n<p>This post is not meant to answer the “how does the login with Facebook work“ question.\nWe will spend some time on it, but just to provoke a discussion, not to go through a tutorial.</p>\n\n<h4 id=\"gamma-disclaimer\">Gamma disclaimer:</h4>\n<p>I have never built a full-fledged auth process from scratch myself in a commercial web app.\nI’m no security expert, so you read at your own risk.</p>\n\n<h2 id=\"authentication-vs-authorization\">Authentication vs Authorization</h2>\n<p>Wow! If you are still reading, cool!\nLet’s start with a short recap on these two basic concepts. Authentication is about verifying <strong>who you are</strong>.\nYou need to prove your identity, that’s all. You may authenticate, for example, by using a password or your fingerprint.\nYou may need to use a token (hard or soft), an authentication-app-generated code or a text message sent to your phone number.\nI hope you tend to use at least two of these. Anyway, once you’ve done it, you are in.</p>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/password.png\" alt=\"Say the password and enter\" /></p>\n\n<p>Authorization is about verifying <em>what you are allowed to do</em>. I’m not going to copy-paste bookish definitions here. For example, when entering a university library, you authenticate by presenting your ID.\nThe librarian checks the authenticity of the document and analyzes whether you are the one on the photograph or not.\nThe authorization process starts right away.\nTo keep things simple, the librarian checks, based on your confirmed identity, whether you are a professor or a student. This implies which books you can borrow and how many you can take home.\nThis is where the privileges or permissions come into play.</p>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/authorization.jpeg\" alt=\"But only if you are a friend\" /></p>\n\n<p>If you are already bored with the most obvious meme I could use, let me give you another obvious example of authorization.\nWhen entering a military zone, you also present your ID for authentication. You can’t get in unless you ARE, e.g. a military officer. It’s not the authentication that failed then.\nThe guardian knows who you are now.\nYou are forbidden to enter as you have not been granted such an authority.</p>\n\n<p>One last meme, I promise.</p>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/authority_not_granted.png\" alt=\"Authority is not granted to you\" /></p>\n\n<h2 id=\"oauth-20-why-is-it-not-about-authenticating-the-user\">OAuth 2.0: why is it not about authenticating the user?</h2>\n\n<p>I started with the above trivia because the concepts of authorization and authentication are mingled so often that, even when you know them, you may still get a headache\nwhen reading about OAuth (from now on, I will omit the 2.0 specification version).</p>\n\n<p>What is OAuth? I hate copy-pasting definitions from official docs and other blogs. What I hate even more is copy-pasting them, rephrasing and selling as my own.\nSo, unless you already did, please stop reading and check out the <a href=\"https://tools.ietf.org/html/rfc6749\">docs</a>, <a href=\"https://oauth.net/2/\">this website</a> and then <a href=\"https://auth0.com/docs/protocols/protocol-oauth2\">the auth0 website</a>. If you liked the latter, you may also check out <a href=\"https://auth0.com/blog/\">their blog</a> in general.\nI assume you’ve read the suggested docs so I will move on to using the traditional OAuth lingo (grants, flows, resources, third-party servers etc).</p>\n\n<h3 id=\"oauth-flows-revisited\">OAuth flows revisited</h3>\n<p>The OAuth specification describes this framework as available in <a href=\"https://tools.ietf.org/html/rfc6749#section-1.3\">four flavours</a>:</p>\n<ul>\n  <li>Authorization Code</li>\n  <li>Implicit</li>\n  <li>Resource Owner Credentials</li>\n  <li>Client Credentials</li>\n</ul>\n\n<p>So 2012.</p>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/i-built-a-time-machine-to-travel-through-time.jpg\" alt=\"Ten years later\" /></p>\n\n<p>The <a href=\"https://auth0.com/docs/flows/resource-owner-password-flow\">Resource Owner Credentials</a> (User Credentials) flow is already legacy and <a href=\"https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\">officially banned by IETF</a>.\n    The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.</p>\n\n<p><a href=\"https://oauth.net/2/grant-types/password/\">Source</a></p>\n\n<p>The same applies to the <a href=\"https://oauth.net/2/grant-types/implicit/\">Implicit</a> flow, also discouraged in its <a href=\"https://tools.ietf.org/html/rfc6749#section-1.3.2\">original form</a>.\nSome experts analyze whether it is already <a href=\"https://developer.okta.com/blog/2019/05/01/is-the-oauth-implicit-flow-dead\">dead</a> or not.\nIn the following two <em>“login with..“</em> examples you should understand OAuth as limited to the <a href=\"https://auth0.com/docs/flows/authorization-code-flow\">Authorization Code</a> grant. The <a href=\"https://auth0.com/docs/flows/client-credentials-flow\">Client Credentials</a> grant is a completely different story, handled\nin a further part of the article.</p>\n\n<h3 id=\"its-hello-world-time\">It’s <strong>Hello World</strong> Time</h3>\n<p>I prefer to think of OAuth as a set of guidelines and best practices that help you solve a common problem related to authorization, as opposed to a strict framework or protocol.\nThis common problem may be for instance the following. Damn, how the hell did these guys implement the cool <em>log in with Facebook</em> feature in their app (not so cool anymore, let’s be honest it’s 2021 not 2015).\nLet’s call this app fb64.com .\nTo be precise, how did those guys use the Facebook API to delegate the process of asking the user whether or not fb64.com can access some of their Facebook account data?\nYou may find an analogous scenario described in virtually EVERY SINGLE blog post referring to OAuth, but there is a good reason why I do it here too. I use it because it sucks and introduces misunderstandigs regarding real-life\n<strong>delegated authorization</strong> and <strong>log in with a third party identity provider</strong> scenarios.\nLet’s consider the dumbest example ever.</p>\n\n<ul>\n  <li>The <em>resource</em> is your Facebook wall and everything you’ve posted on it.</li>\n  <li>The <em>resource owner</em> is, well, just you.</li>\n  <li>The <em>resource server</em> is Facebook.</li>\n  <li>The <em>client</em> is the fb64.com app. Its cool feature is presenting your 10 recent posts\nas Base64 encoded strings.</li>\n  <li>The <em>authorization server</em> is also Facebook itself.</li>\n</ul>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/legit.jpg\" alt=\"Phishing level master\" /></p>\n\n<p>So, in the above scenario, you get the cool feature without giving these guys your Facebook login and password. When you are redirected to the Facebook login page\nfirst you give your consent for fb64.com to access a specific subset of your profile data. Next you type in your credentials (you send them to facebook.com, not to fb64.com) and\nwhen you get redirected back to fb64.com you are already logged-in and see an awesome black-and-white website with your Base64 encoded posts.</p>\n\n<p>What have you done? You’ve <strong>granted</strong> some <strong>client</strong> app access to your <strong>protected resource</strong> data without sharing your <strong>credentials</strong> with it. Full stop.</p>\n\n<p>But is that what we meant? Is that the kind of <strong>resource sharing</strong> and <strong>delegated authorization</strong> you expect when you want to, for example, log in to Booking, via Facebook, to book a hotel room but don’t want to set up an account?</p>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/no-no-no-thank-you.jpg\" alt=\"Thanks but thanks\" /></p>\n\n<h3 id=\"its-real-life-scenario-time\">It’s <strong>Real Life Scenario</strong> Time</h3>\n\n<p>Let’s come up with a more <em>real-life-ish</em> scenario.\nWhen you choose a <strong>third party identity provider login</strong> you probably expect to get an account without wasting time to sign-up and come up with Yet Another Password.\nBefore you click <em>continue as John Smith</em> you are assured that:</p>\n<ul>\n  <li>what the website will have access to are your name, surname, email and profile picture,</li>\n  <li>it will not be allowed to post on your wall.</li>\n</ul>\n\n<p>So what is the resource you are granting some app access to? Your identity! You use Facebook to let Booking know your name, surname, email and picture.\nObviously, in the meantime, Facebook needs to check and confirm that <em>you are who you say you are</em>, e.g. john.smith@somemail.com. So sharing your identity,\nwhich is the actual resource you are authorizing booking.com to access, implies being authenticated behind the scenes. <strong>Proving</strong> your identity is <strong>authentication</strong> while <strong>sharing</strong> it is <strong>authorization</strong>.</p>\n<h4 id=\"digression\">Digression:</h4>\n<p>Seriously, how often do people use and authorize post, tweet or photo importing apps? Apps that post to your wall? I cannot name even one. Importing contacts from Gmail or one social network while logging in to another\nsocial network is the only everyday use case I can think of, apart from identity resource sharing.</p>\n\n<h3 id=\"oauth-based-authentication\">OAuth based <strong>“authentication“</strong></h3>\n\n<p>OAuth does not say a word about the way the authorization server should authenticate the user before letting them authorize the client app.\nHow does OAuth help in authenticating the user then? It doesn’t! The authentication happens transparently to the client app, sort of in-between the ongoing authorization process.\nIt depends on the authorization server’s internal authentication implementation. When you get redirected to Facebook and you type\nin your email and password and hit enter, it could even trigger basic authentication underneath and send your Base64 encoded plain-text credentials in the <em>Authorization</em> (sic!) HTTP header.\nOr it could trigger a three factor authentication process including a hard token and a magic link sent to your email.\nNever forget that OAuth is an authorization framework when you go to job interviews.</p>\n\n<h4 id=\"first-get-in\">First, get in</h4>\n\n<p>Why do we say that we <em>log in to Booking with Facebook using OAuth</em>? I guess the reason of one of the common misunderstandings regarding the purpose of the framework is just this unfortunate mental shortcut. And the fact that most of us think <em>log in</em> === <em>authenticate</em> (which is not wrong, I refuse to elaborate on the semantics in this case).\nWe should rather say that we <em>authorize Booking to delegate authentication to Facebook and use the confirmed identity</em>, in the background of logging in to Booking. We do all that instead of logging in to Booking directly.\nI guess it’s just too long and convoluted ;).</p>\n\n<h4 id=\"then-stay-inside\">Then, stay inside</h4>\n<p>I can’t stress this enough: OAuth based authorization implies authentication performed by the authorization server. But to keep you logged in, the client app needs\nto use some other mechanism underneath, e.g. HTTP session based on cookies. That’s another blank spot on the OAuth map. Which is not wrong, it’s just not the concern of this framework.\nJust, please, don’t use the access token as a session ID.</p>\n\n<h4 id=\"authorizer-and-authorizee-\">Authorizer and authorizee ;)</h4>\n<p>You build the sign-in layer of your app using OAuth as the authorization framework. The user gets authenticated by the third party and allows your app to access their identity data. Let’s clarify another common misconception\nrelated to the part OAuth plays here. Who is the one being authorized? The user? No, it’s your app. The client app is being authorized - by the user - to access a resource, via the authorization server.\nDoes that imply authorizing the user, too? Yes, it may when you think of it the other way round. You cannot authorize the client app to do something that you are not yourself authorized to do in the resource server.\nThis is where <a href=\"https://tools.ietf.org/html/rfc6749#page-23\">access token scopes</a> grow out of resource owner privileges, permissions, roles etc.\nCan the shared identity resource also contain some permissions and privileges granted to the user within the authorization server? Yes, they can and they often do, e.g. as a <em>permissions</em> or <em>roles</em> field in the access token returned by the authorization server.\nI specifically think of <a href=\"https://auth0.com/docs/tokens/access-tokens\">Json Web Tokens</a> and their custom claims.\nForgive me for not pasting in an example of a JWT, but I’m allergic to pasting things you have probably seen a hundred times elsewhere.</p>\n\n<h2 id=\"oauth-based-authentication-no-quotes\">OAuth based <strong>authentication</strong> (no quotes)</h2>\n\n<p>Yep, here <strong>100% correct approach</strong> is not just a clickbait title.</p>\n\n<p>A corresponding authentication framework which you can use to implement the identity layer of your\napplication is <a href=\"https://auth0.com/docs/protocols/openid-connect-protocol\">Open ID Connect</a>.</p>\n\n<p>While the purpose of OAuth is Delegated Authorization, what describes OpenID Connect best is Federated Identity Management.\nWhat does it mean?</p>\n\n<p>OK, I lied. Brace yourselves, for a citation is coming:</p>\n\n<blockquote>\n  <p>While OAuth 2.0 is about resource access and sharing, OIDC is all about user authentication.\nIts purpose is to give you one login for multiple sites.\nEach time you need to log in to a website using OIDC, you are redirected to your OpenID site where you login,\nand then taken back to the website.</p>\n</blockquote>\n\n<p>I guess you’ve just said: “Wait, wait, whaaat???“</p>\n\n<blockquote>\n  <p>… you are redirected to your OpenID site where you login, and then taken back to the website</p>\n</blockquote>\n\n<p>Now you may think: “We’ve just gone through that, haven’t we? You’ve just swapped one framework for another to make the post longer.“</p>\n\n<p>No, it’s just that OIDC is not loosely based on OAuth, it’s actually plugged into it, filling all the authentication\ngaps we’ve mentioned before. It’s best suited to develop your own Identity Provider or more likely an internal security component\nof a system you are building. It may also be a universal login and authorization service for a broader environment of applications\nand systems in your or your client’s company. We will not dig deeper into OIDC in this post, as it deserves\na post of its own. The fact that OIDC perfectly fits into OAuth is best illustrated by the following. While OAuth lets you control access to given resources (like user identity)\nby issuing either JWT access tokens or UUID access tokens, OIDC handles user identity with ID tokens. Access tokens are opaque from the client’s perspective.\nID tokens MUST be a JWT user identity state representation because the ID token, unlike the access token, is readable for the client.\nOIDC does all what was <em>behind the scenes</em> and <em>depending on the identity provider</em> implementation.</p>\n\n<h2 id=\"client-authentication\">Client authentication</h2>\n\n<p>The biggest lie in OAuth is that it has nothing to do with authentication. It’s true only for the resource owner.\nThe client needs to authenticate itself every time it asks for an access token. Usually it implies sending the client ID and secret as Basic Authentication plain-text string.\nSPA applications have no way of “storing“ the secret securely, as it would have to be included in the source code.\nThat’s why the simplified Implicit flow, devised for JavaScript applications as they were understood almost a decade ago, is now officially\nbanned. It omits the client secret, uses only the client ID, and imposes several other limitations. As per storing the client secret on the client side, when using the Authorization Code grant, mobile and native apps have been believed to be\nsecure enough to do it. <a href=\"https://www.youtube.com/watch?v=H6MxsFMAoP8\">They are not</a>.\nThe only way traditional Authorization Code grant can be used securely is by rendering your web application server-side.\nA huge step forward for OAuth for SPA and mobile apps is enriching the Authorization Code with <a href=\"https://developer.okta.com/blog/2018/12/13/oauth-2-for-native-and-mobile-apps\">PKCE</a>, which I only link here,\nas it deserves an article of its own.</p>\n\n<h2 id=\"stateless-is-a-techie-euphemism-for-useless\">Stateless is a techie euphemism for useless</h2>\n\n<p>Another matter I find very often misunderstood is how OAuth as an authorization framework and OIDC as an authentication framework\ncan be used to secure an app using a completely stateless implementation.</p>\n\n<p>Implementing (<strong>fully</strong>) stateless authorization and authentication mechanisms requires\nabandoning the traditional battle-tested server-side sessions with identifiers stored client-side as cookies\nfor (stateless) Json Web Tokens (or some other isomorphic solution).</p>\n\n<p>By stateless JWT I mean an approach where the whole identity and access control context is fetched <strong>once</strong> when the user logs in (or upon token refresh). Then it’s sent back and forth in form of JWT tokens as cookies (sic!), HTTP request headers or body.\nI will not dig into the pros and cons of where to store and how to transfer JWTs as this would mean copying and pasting half\nof the software-literate Internet. You will find the details in the expert articles I link in further sections.</p>\n\n<p>I treat this section as a challenge to prove that an article can be built virtually out of citations only.\nWith minimal intellectual effort from the author. Let’s get started:\n    Unlike sessions - which can be invalidated by the server\n    whenever it feels like it - individual stateless JWT tokens\n    cannot be invalidated. By design, they will be valid until\n    they expire, no matter what happens. This means that you cannot,\n    for example, invalidate the session of an attacker after detecting\n    a compromise. You also cannot invalidate old sessions when a user\n    changes their password.</p>\n\n<blockquote>\n  <p>You are essentially powerless, and cannot ‘kill’ a session\nwithout building complex (and stateful!) infrastructure to\nexplicitly detect and reject them, defeating the entire\npoint of using stateless JWT tokens to begin with.</p>\n</blockquote>\n\n<p>The above and below citations by Sven Slootweg come from <a href=\"http://cryto.net/%7Ejoepie91/blog/2016/06/13/stop-using-jwt-for-sessions/\">this</a>\nand <a href=\"http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/\">this</a> article.</p>\n\n<p>Regarding the highlighted session invalidation concerns, the same applies to challenges related to revoking only some of the user privileges without logging them out, so I will not\ndifferentiate between these two cases.\nBy stateful JWT you should understand any hybrid that tries to balance what is necessary to store (and potentially invalidate)\nserver-side and the data that can be stored in the browser and transferred in an encoded, encrypted and signed form with every request\nuntil it automatically expires. The question is: if something does not require a real-time invalidation - be it a user session or a user privilege -\nare we still talking about stateless authentication and authorization? Or just about some user data that may be stale so there is no need to fetch them\nwith every request? That’s an entirely different story.</p>\n\n<p>I have an auto-reloading citation clip in my gun:</p>\n\n<blockquote>\n  <p>This can mean that a token contains some outdated information like an old website URL that somebody changed\nin their profile - but more seriously, it can also mean somebody has a token with a role of admin,\neven though you’ve just revoked their admin role. Because you can’t invalidate tokens either,\nthere’s no way for you to remove their administrator access,\nshort of shutting down the entire system.</p>\n</blockquote>\n\n<p>I would appreciate if you suggested an example of an application\nthat needs some security mechanisms but it is not critical to be able to\nrevoke or invalidate them in real time.</p>\n\n<p>I have once read that losing a JWT token is like losing your house keys. Be it true or not, you can always say that\nyou can leave your apartment door open for several minutes if you just go down to the groceries and will be right back. Of course you can, you could also\nleave your bank account without logging out on a university library computer, there is a good chance the session will expire before someone\nsteals your money. The same applies to the expiry of a JWT session or access token which is not either whitelisted\nor blacklisted server-side.</p>\n\n<p>When I imagine myself discovering that once I’ve changed my Gmail account password using the desktop app\nI’m still logged in (even if only for the remaining four minutes) on my mobile app then… Well it’s embarrassing and frightening at the same time, when you think of all the accounts\nyou could potentially reset passwords for by taking over someone’s email account. But yeah, go ahead and just remove the user’s token from local storage.</p>\n\n<p>OK, sit down, it’s citation break:</p>\n\n<blockquote>\n  <p>If you are concerned about somebody intercepting your session cookie,\nyou should just be using TLS instead - any kind of session implementation\nwill be interceptable if you don’t use TLS, including JWT.</p>\n</blockquote>\n\n<p>Me discovering someone took over the evergreen refresh token to my mail account:</p>\n\n<p><img src=\"/img/articles/2021-02-01-oauth-stateless-login/refresh_token.jpg\" alt=\"Me discovering someone took over the evergreen refresh token linked to my mail account\" /></p>\n\n<p>There is no you-meme-it-wrong record I couldn’t break.</p>\n\n<p>Another citation (same source):</p>\n<blockquote>\n  <p>Simply put, using cookies is not optional, regardless of whether you use JWT or not.</p>\n</blockquote>\n\n<p>Yet Another Citation</p>\n\n<blockquote>\n  <p>True statelessness and revocation are mutually exclusive.</p>\n</blockquote>\n\n<p>Please do look it up in <a href=\"https://lmgtfy.app/?q=%22statelessness+and+revocation+are+mutually+exclusive%22\">these articles</a>\nor at least notice how many of them come up.</p>\n\n<p>Now that I’m done with throwing angry links at you, let’s focus on the other side of the problem.</p>\n\n<h2 id=\"statelessness-is-a-key-to-easier-scalability\">Statelessness is a key to easier scalability</h2>\n\n<p>It’s not true that introducing stateless elements to your authentication and authorization is something wrong.\nMy intention was to play bad cop to emphasize things you have to be careful about.\nHDD (Hype Driven Development) is a bad practice in general, but as far as security is concerned it’s the shortest path to\ngetting hacked.\nEvery reasonable JWT-based security implementation is a hybrid of stateless, token-based solutions and stateful,\nserver-side-stored solutions. If moving away from traditional, fully stateful implementations is a challenge for\nyour team, you may start <a href=\"https://auth0.com/blog/stateless-auth-for-stateful-minds/\">with this auth0 article</a>\nwhich may make the mind shift easier.</p>\n\n<p>One of the key points from my point of view:</p>\n\n<blockquote>\n  <p>One of the cool things about session IDs is that they are opaque.\n“Opaque” means no data can be extracted from it by third parties (other than the issuer).\nThe association between session ID and data is entirely done server-side.\nAre there any other ways of achieving something of the sort without relying on state?\nEnter cryptography.</p>\n</blockquote>\n\n<p>The general idea, as mentioned in the OIDC section, is that access tokens should be\nseen by the client as UUIDs or other meaningless text. It’s the server that should be able to interpret them.\nThat obviously works for traditional session IDs and can be achieved in the JWT-based\napproach using encryption. Obviously, to achieve revocation you need to store those tokens\nanyway.</p>\n\n<p>This is where the critics of introducing JWTs in the main authorization flows, as opposed to one-time operations or server-side machine-to-machine communication, hit you hard:\n<img src=\"/img/articles/2021-02-01-oauth-stateless-login/jwt-flowchart.png\" alt=\"Authority is not granted to you\" />\n<a href=\"http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/\">Source: again the Slootweg article</a></p>\n\n<p>This positions us somewhere between the second and the third “swimlane“ on the above chart, which means\nkeeping a blacklist of revocations to invalidate or storing ID in the token and rest of the data server-side.</p>\n\n<p>It brings you either to:</p>\n\n<blockquote>\n  <p>Your blacklisting/authenticaiton server goes down. What now?\nOnce the attacker takes down the server he has free roam and there is nothing\nyou can do to stop him.</p>\n</blockquote>\n\n<p>or to:</p>\n\n<blockquote>\n  <p>Congratulations! You’ve reinvented sessions, with all their problems (notably,\ntheir need for central state) and gained nothing in the process. But the implementation\nyou are using is less battle tested and you run a higher risk of vulnerabilities.</p>\n</blockquote>\n\n<p>Yay, time for pasting a JWT body example like in all these other articles:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"sub\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"some_user_id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//no</span><span class=\"w\"> </span><span class=\"err\">reasonable</span><span class=\"w\"> </span><span class=\"err\">case</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">it</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">go</span><span class=\"w\"> </span><span class=\"err\">stale</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">but</span><span class=\"w\"> </span><span class=\"err\">dangerous</span><span class=\"w\"> </span><span class=\"err\">if</span><span class=\"w\"> </span><span class=\"err\">compromised</span><span class=\"w\">\n        </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Jason William Toak\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//highly</span><span class=\"w\"> </span><span class=\"err\">unlikely</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">change</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">but</span><span class=\"w\"> </span><span class=\"err\">it's</span><span class=\"w\"> </span><span class=\"err\">sensitive</span><span class=\"w\"> </span><span class=\"err\">data</span><span class=\"w\">\n        </span><span class=\"nl\">\"email\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"j.w.toak@somemail.com\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//stale</span><span class=\"w\"> </span><span class=\"err\">email</span><span class=\"w\"> </span><span class=\"err\">may</span><span class=\"w\"> </span><span class=\"err\">obviously</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">security</span><span class=\"w\"> </span><span class=\"err\">issue</span><span class=\"w\">\n        </span><span class=\"nl\">\"scope\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n            </span><span class=\"s2\">\"admin\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//this</span><span class=\"w\"> </span><span class=\"err\">really</span><span class=\"w\"> </span><span class=\"err\">sucks</span><span class=\"w\"> </span><span class=\"err\">if</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">token</span><span class=\"w\"> </span><span class=\"err\">is</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">revocable</span><span class=\"w\">\n            </span><span class=\"s2\">\"user\"</span><span class=\"w\">\n        </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Obviously, the above token needs to be <a href=\"https://tools.ietf.org/html/rfc7515\">signed</a> so that you are sure that no one changed\nits content and it needs to be <a href=\"https://tools.ietf.org/html/rfc7516\">encrypted</a> as it contains sensitive data. There is a <a href=\"https://auth0.com/blog/json-web-token-signing-algorithms-overview/\">choice of algorithms</a> available.\nAn interesting fact <a href=\"https://auth0.com/blog/stateless-auth-for-stateful-minds/#The-Technical-Magic--JWTs--Digital-Signatures-and-Encryption\">mentioned</a> by Sebastian Peyrott from the auth0 team:</p>\n\n<blockquote>\n  <p>A typical encryption scheme uses an already signed JWT as the payload for encryption. This is known as a nested JWT. It is acceptable to use the same key for encryption and validation.</p>\n</blockquote>\n\n<p>I guess there is a bottom line that somehow finds a common denominator for both Slootweg and Peyrott manifestos. I do not put these articles in opposition to each other, just as points of view on the same problems from different angles and with different bias.\nThis bottom line, as I see it, is as follows:</p>\n\n<ul>\n  <li>Although JWTs are validated cryptographically, most systems need to use some storage for tokens anyway. By most systems I mean all using refresh tokens, which on its own should, in my opinion, mean virtually each end every token-based application.</li>\n  <li>The storage, depending on the application’s requirements, would be either a blacklist or a whitelist of tokens. These\ncan include short-lived access tokens, long-lived refresh tokens, ID tokens or a cartesian product of all the mentioned options.</li>\n  <li>The only way for the token storage to prevent leakage is checking every applicable token\nagainst the white/black list.</li>\n  <li>You can either call it “reinventing sessions“ or “negating some benefits of the token-based approach“, but revocation and statelessness\nare mutually exclusive and nothing can change it.</li>\n  <li>The more you reduce the tokens’ TTL, the less <em>benefit of statelessness</em> you get. I mean that reducing access tokens’ TTL to a reasonable minimum is probably a must-have in\nmost real-life scenarios. Refreshing them is based on refresh tokens stored server-side anyway and a short access tokens’ TTL requires frequent calls to a single point of failure.\nOne still benefits on using a semi-stateless solution, yet the fully stateless one is usually fiction. “The Benefits of Going Stateless“, a slogan which starts Peyrott’s article, is actually just a figure of speech.</li>\n  <li>For some systems even a five seconds long access token validity may be a security breach.</li>\n  <li>Rolling the signing key is always an option, but it’s like a nuclear suicide attack on your users’ sessions.</li>\n  <li>Even if you check every token against some kind of storage, this does not mean you are back\nto centralized sessions, you still greatly reduce the number of HTTP calls regarding user identity, privilege and other\ndata you choose to fit into a token.</li>\n  <li>Let’s emphasize that again: there is a huge difference between accessing a VALID/INVALID key-value storage with every request versus querying\na set of storages for distributed user-related data, and aggregating them for every request.</li>\n  <li>In a microservice architecture it’s a COLOSSAL, crucial change, which means a difference\nbetween a system that barely crawls and one that performs very well.</li>\n  <li>In an event-driven microservice architecture, you can handle both user log-outs and privilege revocation or stale data\nwith events invalidating corresponding tokens. Generating a new token does not necessarily mean fetching all data again, it depends on the granularity\nof information included in the event.</li>\n  <li>Does it mean latency, possible race conditions, eventual consistency? Well, yeah, just as pretty much everything does nowadays.</li>\n</ul>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p><em>Authorization, authentication, statelessness, revocation, tokens, sessions.</em></p>\n\n<p>Lots of stuff easy to misunderstand, implement the wrong way, oversimplify and wrongly criticise.</p>\n\n<p><em>OAuth, JWT, OpenID Connect, Authorization Code Grant, Implicit Flow, User and Client Credentials, Third-Party Identity Providers,\nDelegated Authorization, Federated Identity Management.</em></p>\n\n<p>That’s again a lot of words and it’s not even a sentence, though a nice SEO booster ;)  We’ve gone more or less through\nall of that, but studying all these terms in detail here was impossible. Should there be at least one thing this article made clear to you and if you\nfeel some misconceptions have been clarified, I’m very happy. If there is at least one comment\nbelow this article which will prove me wrong in some or most of views on this broad subject, I will be\nmore than happy to learn something and exchange opinions. As I’ve mentioned in\nthe beginning of the article, security is not something most of us can study, implement and\nwork with every day. Please feel invited to share your knowledge and experience, also including stuff\nthat looks good on paper, but didn’t work for you in production. I will appreciate it a lot.</p>\n","contentSnippet":"Many of us spend most of their software development careers improving and extending applications protected by pre-existing security mechanisms. That’s why\nwe rarely address problems related directly to authentication and authorization unless we build apps from scratch.\nRegardless of your experience I still hope you will find this article interesting.\nIt’s not meant to be a tutorial. I would like to focus on clarifying basic concepts and highlighting common misconceptions.\nAlpha disclaimer:\nSorry to disappoint you, but the title of this article is just a cheap click-bait.\nIt doesn’t matter whether you started reading because you disagree with\nthe title or because you hoped to find the holy grail\nof securing web applications. There is a chance you will find something for yourself anyway.\nBeta disclaimer:\nThis post is not meant to answer the “how does the login with Facebook work“ question.\nWe will spend some time on it, but just to provoke a discussion, not to go through a tutorial.\nGamma disclaimer:\nI have never built a full-fledged auth process from scratch myself in a commercial web app.\nI’m no security expert, so you read at your own risk.\nAuthentication vs Authorization\nWow! If you are still reading, cool!\nLet’s start with a short recap on these two basic concepts. Authentication is about verifying who you are.\nYou need to prove your identity, that’s all. You may authenticate, for example, by using a password or your fingerprint.\nYou may need to use a token (hard or soft), an authentication-app-generated code or a text message sent to your phone number.\nI hope you tend to use at least two of these. Anyway, once you’ve done it, you are in.\n\nAuthorization is about verifying what you are allowed to do. I’m not going to copy-paste bookish definitions here. For example, when entering a university library, you authenticate by presenting your ID.\nThe librarian checks the authenticity of the document and analyzes whether you are the one on the photograph or not.\nThe authorization process starts right away.\nTo keep things simple, the librarian checks, based on your confirmed identity, whether you are a professor or a student. This implies which books you can borrow and how many you can take home.\nThis is where the privileges or permissions come into play.\n\nIf you are already bored with the most obvious meme I could use, let me give you another obvious example of authorization.\nWhen entering a military zone, you also present your ID for authentication. You can’t get in unless you ARE, e.g. a military officer. It’s not the authentication that failed then.\nThe guardian knows who you are now.\nYou are forbidden to enter as you have not been granted such an authority.\nOne last meme, I promise.\n\nOAuth 2.0: why is it not about authenticating the user?\nI started with the above trivia because the concepts of authorization and authentication are mingled so often that, even when you know them, you may still get a headache\nwhen reading about OAuth (from now on, I will omit the 2.0 specification version).\nWhat is OAuth? I hate copy-pasting definitions from official docs and other blogs. What I hate even more is copy-pasting them, rephrasing and selling as my own.\nSo, unless you already did, please stop reading and check out the docs, this website and then the auth0 website. If you liked the latter, you may also check out their blog in general.\nI assume you’ve read the suggested docs so I will move on to using the traditional OAuth lingo (grants, flows, resources, third-party servers etc).\nOAuth flows revisited\nThe OAuth specification describes this framework as available in four flavours:\nAuthorization Code\nImplicit\nResource Owner Credentials\nClient Credentials\nSo 2012.\n\nThe Resource Owner Credentials (User Credentials) flow is already legacy and officially banned by IETF.\n    The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\nSource\nThe same applies to the Implicit flow, also discouraged in its original form.\nSome experts analyze whether it is already dead or not.\nIn the following two “login with..“ examples you should understand OAuth as limited to the Authorization Code grant. The Client Credentials grant is a completely different story, handled\nin a further part of the article.\nIt’s Hello World Time\nI prefer to think of OAuth as a set of guidelines and best practices that help you solve a common problem related to authorization, as opposed to a strict framework or protocol.\nThis common problem may be for instance the following. Damn, how the hell did these guys implement the cool log in with Facebook feature in their app (not so cool anymore, let’s be honest it’s 2021 not 2015).\nLet’s call this app fb64.com .\nTo be precise, how did those guys use the Facebook API to delegate the process of asking the user whether or not fb64.com can access some of their Facebook account data?\nYou may find an analogous scenario described in virtually EVERY SINGLE blog post referring to OAuth, but there is a good reason why I do it here too. I use it because it sucks and introduces misunderstandigs regarding real-life\ndelegated authorization and log in with a third party identity provider scenarios.\nLet’s consider the dumbest example ever.\nThe resource is your Facebook wall and everything you’ve posted on it.\nThe resource owner is, well, just you.\nThe resource server is Facebook.\nThe client is the fb64.com app. Its cool feature is presenting your 10 recent posts\nas Base64 encoded strings.\nThe authorization server is also Facebook itself.\n\nSo, in the above scenario, you get the cool feature without giving these guys your Facebook login and password. When you are redirected to the Facebook login page\nfirst you give your consent for fb64.com to access a specific subset of your profile data. Next you type in your credentials (you send them to facebook.com, not to fb64.com) and\nwhen you get redirected back to fb64.com you are already logged-in and see an awesome black-and-white website with your Base64 encoded posts.\nWhat have you done? You’ve granted some client app access to your protected resource data without sharing your credentials with it. Full stop.\nBut is that what we meant? Is that the kind of resource sharing and delegated authorization you expect when you want to, for example, log in to Booking, via Facebook, to book a hotel room but don’t want to set up an account?\n\nIt’s Real Life Scenario Time\nLet’s come up with a more real-life-ish scenario.\nWhen you choose a third party identity provider login you probably expect to get an account without wasting time to sign-up and come up with Yet Another Password.\nBefore you click continue as John Smith you are assured that:\nwhat the website will have access to are your name, surname, email and profile picture,\nit will not be allowed to post on your wall.\nSo what is the resource you are granting some app access to? Your identity! You use Facebook to let Booking know your name, surname, email and picture.\nObviously, in the meantime, Facebook needs to check and confirm that you are who you say you are, e.g. john.smith@somemail.com. So sharing your identity,\nwhich is the actual resource you are authorizing booking.com to access, implies being authenticated behind the scenes. Proving your identity is authentication while sharing it is authorization.\nDigression:\nSeriously, how often do people use and authorize post, tweet or photo importing apps? Apps that post to your wall? I cannot name even one. Importing contacts from Gmail or one social network while logging in to another\nsocial network is the only everyday use case I can think of, apart from identity resource sharing.\nOAuth based “authentication“\nOAuth does not say a word about the way the authorization server should authenticate the user before letting them authorize the client app.\nHow does OAuth help in authenticating the user then? It doesn’t! The authentication happens transparently to the client app, sort of in-between the ongoing authorization process.\nIt depends on the authorization server’s internal authentication implementation. When you get redirected to Facebook and you type\nin your email and password and hit enter, it could even trigger basic authentication underneath and send your Base64 encoded plain-text credentials in the Authorization (sic!) HTTP header.\nOr it could trigger a three factor authentication process including a hard token and a magic link sent to your email.\nNever forget that OAuth is an authorization framework when you go to job interviews.\nFirst, get in\nWhy do we say that we log in to Booking with Facebook using OAuth? I guess the reason of one of the common misunderstandings regarding the purpose of the framework is just this unfortunate mental shortcut. And the fact that most of us think log in === authenticate (which is not wrong, I refuse to elaborate on the semantics in this case).\nWe should rather say that we authorize Booking to delegate authentication to Facebook and use the confirmed identity, in the background of logging in to Booking. We do all that instead of logging in to Booking directly.\nI guess it’s just too long and convoluted ;).\nThen, stay inside\nI can’t stress this enough: OAuth based authorization implies authentication performed by the authorization server. But to keep you logged in, the client app needs\nto use some other mechanism underneath, e.g. HTTP session based on cookies. That’s another blank spot on the OAuth map. Which is not wrong, it’s just not the concern of this framework.\nJust, please, don’t use the access token as a session ID.\nAuthorizer and authorizee ;)\nYou build the sign-in layer of your app using OAuth as the authorization framework. The user gets authenticated by the third party and allows your app to access their identity data. Let’s clarify another common misconception\nrelated to the part OAuth plays here. Who is the one being authorized? The user? No, it’s your app. The client app is being authorized - by the user - to access a resource, via the authorization server.\nDoes that imply authorizing the user, too? Yes, it may when you think of it the other way round. You cannot authorize the client app to do something that you are not yourself authorized to do in the resource server.\nThis is where access token scopes grow out of resource owner privileges, permissions, roles etc.\nCan the shared identity resource also contain some permissions and privileges granted to the user within the authorization server? Yes, they can and they often do, e.g. as a permissions or roles field in the access token returned by the authorization server.\nI specifically think of Json Web Tokens and their custom claims.\nForgive me for not pasting in an example of a JWT, but I’m allergic to pasting things you have probably seen a hundred times elsewhere.\nOAuth based authentication (no quotes)\nYep, here 100% correct approach is not just a clickbait title.\nA corresponding authentication framework which you can use to implement the identity layer of your\napplication is Open ID Connect.\nWhile the purpose of OAuth is Delegated Authorization, what describes OpenID Connect best is Federated Identity Management.\nWhat does it mean?\nOK, I lied. Brace yourselves, for a citation is coming:\nWhile OAuth 2.0 is about resource access and sharing, OIDC is all about user authentication.\nIts purpose is to give you one login for multiple sites.\nEach time you need to log in to a website using OIDC, you are redirected to your OpenID site where you login,\nand then taken back to the website.\nI guess you’ve just said: “Wait, wait, whaaat???“\n… you are redirected to your OpenID site where you login, and then taken back to the website\nNow you may think: “We’ve just gone through that, haven’t we? You’ve just swapped one framework for another to make the post longer.“\nNo, it’s just that OIDC is not loosely based on OAuth, it’s actually plugged into it, filling all the authentication\ngaps we’ve mentioned before. It’s best suited to develop your own Identity Provider or more likely an internal security component\nof a system you are building. It may also be a universal login and authorization service for a broader environment of applications\nand systems in your or your client’s company. We will not dig deeper into OIDC in this post, as it deserves\na post of its own. The fact that OIDC perfectly fits into OAuth is best illustrated by the following. While OAuth lets you control access to given resources (like user identity)\nby issuing either JWT access tokens or UUID access tokens, OIDC handles user identity with ID tokens. Access tokens are opaque from the client’s perspective.\nID tokens MUST be a JWT user identity state representation because the ID token, unlike the access token, is readable for the client.\nOIDC does all what was behind the scenes and depending on the identity provider implementation.\nClient authentication\nThe biggest lie in OAuth is that it has nothing to do with authentication. It’s true only for the resource owner.\nThe client needs to authenticate itself every time it asks for an access token. Usually it implies sending the client ID and secret as Basic Authentication plain-text string.\nSPA applications have no way of “storing“ the secret securely, as it would have to be included in the source code.\nThat’s why the simplified Implicit flow, devised for JavaScript applications as they were understood almost a decade ago, is now officially\nbanned. It omits the client secret, uses only the client ID, and imposes several other limitations. As per storing the client secret on the client side, when using the Authorization Code grant, mobile and native apps have been believed to be\nsecure enough to do it. They are not.\nThe only way traditional Authorization Code grant can be used securely is by rendering your web application server-side.\nA huge step forward for OAuth for SPA and mobile apps is enriching the Authorization Code with PKCE, which I only link here,\nas it deserves an article of its own.\nStateless is a techie euphemism for useless\nAnother matter I find very often misunderstood is how OAuth as an authorization framework and OIDC as an authentication framework\ncan be used to secure an app using a completely stateless implementation.\nImplementing (fully) stateless authorization and authentication mechanisms requires\nabandoning the traditional battle-tested server-side sessions with identifiers stored client-side as cookies\nfor (stateless) Json Web Tokens (or some other isomorphic solution).\nBy stateless JWT I mean an approach where the whole identity and access control context is fetched once when the user logs in (or upon token refresh). Then it’s sent back and forth in form of JWT tokens as cookies (sic!), HTTP request headers or body.\nI will not dig into the pros and cons of where to store and how to transfer JWTs as this would mean copying and pasting half\nof the software-literate Internet. You will find the details in the expert articles I link in further sections.\nI treat this section as a challenge to prove that an article can be built virtually out of citations only.\nWith minimal intellectual effort from the author. Let’s get started:\n    Unlike sessions - which can be invalidated by the server\n    whenever it feels like it - individual stateless JWT tokens\n    cannot be invalidated. By design, they will be valid until\n    they expire, no matter what happens. This means that you cannot,\n    for example, invalidate the session of an attacker after detecting\n    a compromise. You also cannot invalidate old sessions when a user\n    changes their password.\nYou are essentially powerless, and cannot ‘kill’ a session\nwithout building complex (and stateful!) infrastructure to\nexplicitly detect and reject them, defeating the entire\npoint of using stateless JWT tokens to begin with.\nThe above and below citations by Sven Slootweg come from this\nand this article.\nRegarding the highlighted session invalidation concerns, the same applies to challenges related to revoking only some of the user privileges without logging them out, so I will not\ndifferentiate between these two cases.\nBy stateful JWT you should understand any hybrid that tries to balance what is necessary to store (and potentially invalidate)\nserver-side and the data that can be stored in the browser and transferred in an encoded, encrypted and signed form with every request\nuntil it automatically expires. The question is: if something does not require a real-time invalidation - be it a user session or a user privilege -\nare we still talking about stateless authentication and authorization? Or just about some user data that may be stale so there is no need to fetch them\nwith every request? That’s an entirely different story.\nI have an auto-reloading citation clip in my gun:\nThis can mean that a token contains some outdated information like an old website URL that somebody changed\nin their profile - but more seriously, it can also mean somebody has a token with a role of admin,\neven though you’ve just revoked their admin role. Because you can’t invalidate tokens either,\nthere’s no way for you to remove their administrator access,\nshort of shutting down the entire system.\nI would appreciate if you suggested an example of an application\nthat needs some security mechanisms but it is not critical to be able to\nrevoke or invalidate them in real time.\nI have once read that losing a JWT token is like losing your house keys. Be it true or not, you can always say that\nyou can leave your apartment door open for several minutes if you just go down to the groceries and will be right back. Of course you can, you could also\nleave your bank account without logging out on a university library computer, there is a good chance the session will expire before someone\nsteals your money. The same applies to the expiry of a JWT session or access token which is not either whitelisted\nor blacklisted server-side.\nWhen I imagine myself discovering that once I’ve changed my Gmail account password using the desktop app\nI’m still logged in (even if only for the remaining four minutes) on my mobile app then… Well it’s embarrassing and frightening at the same time, when you think of all the accounts\nyou could potentially reset passwords for by taking over someone’s email account. But yeah, go ahead and just remove the user’s token from local storage.\nOK, sit down, it’s citation break:\nIf you are concerned about somebody intercepting your session cookie,\nyou should just be using TLS instead - any kind of session implementation\nwill be interceptable if you don’t use TLS, including JWT.\nMe discovering someone took over the evergreen refresh token to my mail account:\n\nThere is no you-meme-it-wrong record I couldn’t break.\nAnother citation (same source):\nSimply put, using cookies is not optional, regardless of whether you use JWT or not.\nYet Another Citation\nTrue statelessness and revocation are mutually exclusive.\nPlease do look it up in these articles\nor at least notice how many of them come up.\nNow that I’m done with throwing angry links at you, let’s focus on the other side of the problem.\nStatelessness is a key to easier scalability\nIt’s not true that introducing stateless elements to your authentication and authorization is something wrong.\nMy intention was to play bad cop to emphasize things you have to be careful about.\nHDD (Hype Driven Development) is a bad practice in general, but as far as security is concerned it’s the shortest path to\ngetting hacked.\nEvery reasonable JWT-based security implementation is a hybrid of stateless, token-based solutions and stateful,\nserver-side-stored solutions. If moving away from traditional, fully stateful implementations is a challenge for\nyour team, you may start with this auth0 article\nwhich may make the mind shift easier.\nOne of the key points from my point of view:\nOne of the cool things about session IDs is that they are opaque.\n“Opaque” means no data can be extracted from it by third parties (other than the issuer).\nThe association between session ID and data is entirely done server-side.\nAre there any other ways of achieving something of the sort without relying on state?\nEnter cryptography.\nThe general idea, as mentioned in the OIDC section, is that access tokens should be\nseen by the client as UUIDs or other meaningless text. It’s the server that should be able to interpret them.\nThat obviously works for traditional session IDs and can be achieved in the JWT-based\napproach using encryption. Obviously, to achieve revocation you need to store those tokens\nanyway.\nThis is where the critics of introducing JWTs in the main authorization flows, as opposed to one-time operations or server-side machine-to-machine communication, hit you hard:\n\nSource: again the Slootweg article\nThis positions us somewhere between the second and the third “swimlane“ on the above chart, which means\nkeeping a blacklist of revocations to invalidate or storing ID in the token and rest of the data server-side.\nIt brings you either to:\nYour blacklisting/authenticaiton server goes down. What now?\nOnce the attacker takes down the server he has free roam and there is nothing\nyou can do to stop him.\nor to:\nCongratulations! You’ve reinvented sessions, with all their problems (notably,\ntheir need for central state) and gained nothing in the process. But the implementation\nyou are using is less battle tested and you run a higher risk of vulnerabilities.\nYay, time for pasting a JWT body example like in all these other articles:\n\n    {\n        \"sub\": \"some_user_id\", //no reasonable case for it to go stale, but dangerous if compromised\n        \"name\": \"Jason William Toak\", //highly unlikely to change, but it's sensitive data\n        \"email\": \"j.w.toak@somemail.com\", //stale email may obviously be a security issue\n        \"scope\": [\n            \"admin\", //this really sucks if the token is not revocable\n            \"user\"\n        ]\n    }\n\n\nObviously, the above token needs to be signed so that you are sure that no one changed\nits content and it needs to be encrypted as it contains sensitive data. There is a choice of algorithms available.\nAn interesting fact mentioned by Sebastian Peyrott from the auth0 team:\nA typical encryption scheme uses an already signed JWT as the payload for encryption. This is known as a nested JWT. It is acceptable to use the same key for encryption and validation.\nI guess there is a bottom line that somehow finds a common denominator for both Slootweg and Peyrott manifestos. I do not put these articles in opposition to each other, just as points of view on the same problems from different angles and with different bias.\nThis bottom line, as I see it, is as follows:\nAlthough JWTs are validated cryptographically, most systems need to use some storage for tokens anyway. By most systems I mean all using refresh tokens, which on its own should, in my opinion, mean virtually each end every token-based application.\nThe storage, depending on the application’s requirements, would be either a blacklist or a whitelist of tokens. These\ncan include short-lived access tokens, long-lived refresh tokens, ID tokens or a cartesian product of all the mentioned options.\nThe only way for the token storage to prevent leakage is checking every applicable token\nagainst the white/black list.\nYou can either call it “reinventing sessions“ or “negating some benefits of the token-based approach“, but revocation and statelessness\nare mutually exclusive and nothing can change it.\nThe more you reduce the tokens’ TTL, the less benefit of statelessness you get. I mean that reducing access tokens’ TTL to a reasonable minimum is probably a must-have in\nmost real-life scenarios. Refreshing them is based on refresh tokens stored server-side anyway and a short access tokens’ TTL requires frequent calls to a single point of failure.\nOne still benefits on using a semi-stateless solution, yet the fully stateless one is usually fiction. “The Benefits of Going Stateless“, a slogan which starts Peyrott’s article, is actually just a figure of speech.\nFor some systems even a five seconds long access token validity may be a security breach.\nRolling the signing key is always an option, but it’s like a nuclear suicide attack on your users’ sessions.\nEven if you check every token against some kind of storage, this does not mean you are back\nto centralized sessions, you still greatly reduce the number of HTTP calls regarding user identity, privilege and other\ndata you choose to fit into a token.\nLet’s emphasize that again: there is a huge difference between accessing a VALID/INVALID key-value storage with every request versus querying\na set of storages for distributed user-related data, and aggregating them for every request.\nIn a microservice architecture it’s a COLOSSAL, crucial change, which means a difference\nbetween a system that barely crawls and one that performs very well.\nIn an event-driven microservice architecture, you can handle both user log-outs and privilege revocation or stale data\nwith events invalidating corresponding tokens. Generating a new token does not necessarily mean fetching all data again, it depends on the granularity\nof information included in the event.\nDoes it mean latency, possible race conditions, eventual consistency? Well, yeah, just as pretty much everything does nowadays.\nSummary\nAuthorization, authentication, statelessness, revocation, tokens, sessions.\nLots of stuff easy to misunderstand, implement the wrong way, oversimplify and wrongly criticise.\nOAuth, JWT, OpenID Connect, Authorization Code Grant, Implicit Flow, User and Client Credentials, Third-Party Identity Providers,\nDelegated Authorization, Federated Identity Management.\nThat’s again a lot of words and it’s not even a sentence, though a nice SEO booster ;)  We’ve gone more or less through\nall of that, but studying all these terms in detail here was impossible. Should there be at least one thing this article made clear to you and if you\nfeel some misconceptions have been clarified, I’m very happy. If there is at least one comment\nbelow this article which will prove me wrong in some or most of views on this broad subject, I will be\nmore than happy to learn something and exchange opinions. As I’ve mentioned in\nthe beginning of the article, security is not something most of us can study, implement and\nwork with every day. Please feel invited to share your knowledge and experience, also including stuff\nthat looks good on paper, but didn’t work for you in production. I will appreciate it a lot.","guid":"https://blog.allegro.tech/2021/02/oauth-stateless-login.html","categories":["tech","security","oauth","authentication","authorization","jwt","openid-connect"],"isoDate":"2021-01-31T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"}],"jobs":[{"id":"743999740494803","name":"Data Analyst (Advertising)","uuid":"f4d185e7-307c-4307-8d3f-1243c3b13fb7","refNumber":"REF2704P","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-03-29T13:12:53.000Z","location":{"city":"Warszawa","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"1013224","label":"Advertising"},"function":{"id":"analyst","label":"Analyst"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"1013224","valueLabel":"Advertising"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999740494803","creator":{"name":"Ada Latańska"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999740258452","name":"Mobile Software Engineer (iOS) - Technical Platform","uuid":"ed35b685-c7f5-4064-be16-e3569a1dfb87","refNumber":"REF2705E","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-03-26T09:54:14.000Z","location":{"city":"Warszawa, Kraków, Poznań","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"1013462","label":"Technology - Product Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"1013462","valueLabel":"Technology - Product Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"iOS developer, iOS engineer, mobile, iOS, mobile software engineer (iOS)"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999740258452","creator":{"name":"Małgorzata Sejdak"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999740100475","name":"Senior UX Designer","uuid":"4edf128d-16fc-4c89-b844-63d8ab9c517a","refNumber":"REF2701N","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-03-25T10:40:53.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"1013462","label":"Technology - Product Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"31873284-1e97-427d-8918-6ce504344351","valueLabel":"Nie"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"1013462","valueLabel":"Technology - Product Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"5dee624907e370138f7ad0bd","fieldLabel":"Kompetencje Allegro","valueId":"236b702e-45b9-4c4b-82d4-01c640aaf881","valueLabel":"Nie"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"UX, user experience, UX Designer, designer, projektant, projektowanie"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999740100475","creator":{"name":"Angelika Szymkiewicz"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999739963804","name":"Business Application Specialist (HR Tech)","uuid":"c7c55f06-795a-4901-8c08-c7cfca03e857","refNumber":"REF2700P","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-03-24T13:36:45.000Z","location":{"city":"Warszawa, Poznań","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"1013275","label":"IT Business Services"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"bcab9d4f-8624-4d85-8e3d-dbf12239b972","valueLabel":"Nie"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"a6765624-e047-4a26-9481-9621086d8b96","valueLabel":"Nie"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"31873284-1e97-427d-8918-6ce504344351","valueLabel":"Nie"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"1013275","valueLabel":"IT Business Services"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999739963804","creator":{"name":"Aleksandra Sotowska"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999739926098","name":"Software Engineer (Java/Kotlin) - Merchant Experience","uuid":"b67a4ab8-44ea-492d-a8d4-79cf838f7f72","refNumber":"REF2567O","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-03-24T08:02:38.000Z","location":{"city":"Warszawa,Kraków,Poznań,Toruń","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"1013462","label":"Technology - Product Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"1013462","valueLabel":"Technology - Product Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"java, kotlin, scala"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999739926098","creator":{"name":"Katarzyna Faber"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}}],"events":[{"created":1616053977000,"duration":7200000,"id":"277005370","name":"Allegro Tech Labs #7 Online: System design workshop","rsvp_limit":60,"date_in_series_pattern":false,"status":"upcoming","time":1617811200000,"local_date":"2021-04-07","local_time":"18:00","updated":1616605011000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":17,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/277005370/","description":"***REJESTRACJA***Prosimy o rejestrację na wydarzenie poprzez stronę: https://app.evenea.pl/event/allegro-tech-labs-7/. Po kliknięciu przycisku \"Chcę wziąć udział w warsztatach\" przeniesiesz się na formularz rejestracyjny - prosimy o udzielenie…","visibility":"public","member_pay_fee":false},{"created":1615571910000,"duration":7200000,"id":"276893259","name":"#16 Allegro Tech Live - Jak dostać się do Allegro?","date_in_series_pattern":false,"status":"upcoming","time":1617292800000,"local_date":"2021-04-01","local_time":"18:00","updated":1616780044000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":140,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/276893259/","description":"Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w naszych biurach, ale tym razem to my…","how_to_find_us":"https://youtu.be/qtvZm2RNoRc","visibility":"public","member_pay_fee":false},{"created":1614684480000,"duration":7200000,"id":"276687714","name":"#15 Allegro Tech Live - Jak technicznie dbać o produkt?","date_in_series_pattern":false,"status":"past","time":1616086800000,"local_date":"2021-03-18","local_time":"18:00","updated":1616096848000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":145,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/276687714/","description":"Allegro Tech Live to nowa, w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w naszych biurach, ale tym razem to…","how_to_find_us":"https://www.facebook.com/allegro.tech/","visibility":"public","member_pay_fee":false},{"created":1613735379000,"duration":97200000,"id":"276458683","name":"Allegro Tech Labs #6 Online: Poznać Reacta - poziom podstawowy","date_in_series_pattern":false,"status":"past","time":1615392000000,"local_date":"2021-03-10","local_time":"17:00","updated":1615491463000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":75,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/276458683/","description":"***REJESTRACJA***Prosimy o rejestrację poprzez https://app.evenea.pl/event/allegro-tech-labs-6/ Po zarejestrowaniu otrzymasz e-mail z potwierdzeniem rejestracji, Twoim biletem oraz linkiem do warsztatów online. ***SZCZEGÓŁY***Allegro Tech Labs #6 to idealna…","visibility":"public","member_pay_fee":false}],"podcasts":[{"creator":{"name":["Jakub Kaczmarski"]},"title":"Logistyka na platformie Allegro","link":"https://podcast.allegro.tech/logistyka_na_platformie_allegro","pubDate":"Thu, 25 Mar 2021 00:00:00 GMT","author":{"name":["Jakub Kaczmarski"]},"enclosure":{"url":"https://www.buzzsprout.com/887914/8163669.mp3","type":"audio/mpeg"},"content":"Jak zarządzać zespołem ponad 100 osób? Jak rozwijać motywację, pasję i potencjał swoich pracowników? Na co zwracać uwagę? Jakie inspiracje można czerpać ze sportu w zarządzaniu? Jak zorganizować swoją pracę? O tym opowie Jakub Kaczmarski - Technology Director odpowiadając za obszar Delivery Experience i Allegro Smart! na platformie Allegro.","contentSnippet":"Jak zarządzać zespołem ponad 100 osób? Jak rozwijać motywację, pasję i potencjał swoich pracowników? Na co zwracać uwagę? Jakie inspiracje można czerpać ze sportu w zarządzaniu? Jak zorganizować swoją pracę? O tym opowie Jakub Kaczmarski - Technology Director odpowiadając za obszar Delivery Experience i Allegro Smart! na platformie Allegro.","guid":"https://podcast.allegro.tech/logistyka_na_platformie_allegro","isoDate":"2021-03-25T00:00:00.000Z","itunes":{"author":"Jakub Kaczmarski","summary":"Jak zarządzać zespołem ponad 100 osób? Jak rozwijać motywację, pasję i potencjał swoich pracowników? Na co zwracać uwagę? Jakie inspiracje można czerpać ze sportu w zarządzaniu? Jak zorganizować swoją pracę? O tym opowie Jakub Kaczmarski - Technology Director odpowiadając za obszar Delivery Experience i Allegro Smart! na platformie Allegro.","explicit":"false"}},{"creator":{"name":["Alicja Halamska"]},"title":"Summer e-Xperience w Allegro","link":"https://podcast.allegro.tech/summer_e_xperience_w_allegro","pubDate":"Thu, 18 Mar 2021 00:00:00 GMT","author":{"name":["Alicja Halamska"]},"enclosure":{"url":"https://www.buzzsprout.com/887914/8150206-sezon-ii-4-summer-e-xperience-w-allegro-alicja-halamska.mp3","type":"audio/mpeg"},"content":"Jak wygląda program Summer e-Xperience w obszarze technologii? Czego można nauczyć się podczas programu jako Software Engineer? Dlaczego #dobrzetubyć najlepiej oddaje ideę programu? Komu polecamy nasz letni program i co radzimy? Na te pytania odpowie Alicja Halamska - Junior Software Engineer w Allegro, która w 2020 roku dołączyła do programu Summer e-Xperience.","contentSnippet":"Jak wygląda program Summer e-Xperience w obszarze technologii? Czego można nauczyć się podczas programu jako Software Engineer? Dlaczego #dobrzetubyć najlepiej oddaje ideę programu? Komu polecamy nasz letni program i co radzimy? Na te pytania odpowie Alicja Halamska - Junior Software Engineer w Allegro, która w 2020 roku dołączyła do programu Summer e-Xperience.","guid":"https://podcast.allegro.tech/summer_e_xperience_w_allegro","isoDate":"2021-03-18T00:00:00.000Z","itunes":{"author":"Alicja Halamska","summary":"Jak wygląda program Summer e-Xperience w obszarze technologii? Czego można nauczyć się podczas programu jako Software Engineer? Dlaczego #dobrzetubyć najlepiej oddaje ideę programu? Komu polecamy nasz letni program i co radzimy? Na te pytania odpowie Alicja Halamska - Junior Software Engineer w Allegro, która w 2020 roku dołączyła do programu Summer e-Xperience.","explicit":"false"}},{"creator":{"name":["Piotr Klapczyński"]},"title":"SRE w Allegro","link":"https://podcast.allegro.tech/sre_w_allegro","pubDate":"Thu, 04 Mar 2021 00:00:00 GMT","author":{"name":["Piotr Klapczyński"]},"enclosure":{"url":"https://www.buzzsprout.com/887914/8059450-sezon-ii-3-piotr-klapczynski.mp3","type":"audio/mpeg"},"content":"Jak w Allegro radzimy sobie z awariami? Jak im zapobiegać oraz dlaczego sami je wywołujemy? Czy szalonym jest składanie całego Data Center? Czym jest SRE w Allegro i dlaczego jest unikatowe? Na te wszystkie pytania odpowie Piotr Klapczyński - Team Leader w Allegro.","contentSnippet":"Jak w Allegro radzimy sobie z awariami? Jak im zapobiegać oraz dlaczego sami je wywołujemy? Czy szalonym jest składanie całego Data Center? Czym jest SRE w Allegro i dlaczego jest unikatowe? Na te wszystkie pytania odpowie Piotr Klapczyński - Team Leader w Allegro.","guid":"https://podcast.allegro.tech/sre_w_allegro","isoDate":"2021-03-04T00:00:00.000Z","itunes":{"author":"Piotr Klapczyński","summary":"Jak w Allegro radzimy sobie z awariami? Jak im zapobiegać oraz dlaczego sami je wywołujemy? Czy szalonym jest składanie całego Data Center? Czym jest SRE w Allegro i dlaczego jest unikatowe? Na te wszystkie pytania odpowie Piotr Klapczyński - Team Leader w Allegro.","explicit":"false"}},{"creator":{"name":["Dariusz Jędrzejczyk"]},"title":"Service Mesh oraz praca programisty w Allegro","link":"https://podcast.allegro.tech/service_mesh_oraz_praca_programisty_w_allegro","pubDate":"Thu, 25 Feb 2021 00:00:00 GMT","author":{"name":["Dariusz Jędrzejczyk"]},"enclosure":{"url":"https://www.buzzsprout.com/887914/7917649-sezon-ii-2-service-mesh-oraz-praca-praca-programisty-w-allegro-dariusz-jedrzejczak.mp3","type":"audio/mpeg"},"content":"Czym jest Service Mesh? Jak został wdrożony do Allegro dla ponad 1000 usług na produkcji? Dlaczego usprawnianie pracy programistom jest dla nas ważne i dlaczego programista to klient? Jak wytwarzamy produkty używane przez zespoły deweloperskie? Kim jest Principal w Allegro? Jak może wyglądać ścieżka kariery programisty? Na te pytania odpowie Dariusz Jędrzejczyk - Principal Software Engineer.","contentSnippet":"Czym jest Service Mesh? Jak został wdrożony do Allegro dla ponad 1000 usług na produkcji? Dlaczego usprawnianie pracy programistom jest dla nas ważne i dlaczego programista to klient? Jak wytwarzamy produkty używane przez zespoły deweloperskie? Kim jest Principal w Allegro? Jak może wyglądać ścieżka kariery programisty? Na te pytania odpowie Dariusz Jędrzejczyk - Principal Software Engineer.","guid":"https://podcast.allegro.tech/service_mesh_oraz_praca_programisty_w_allegro","isoDate":"2021-02-25T00:00:00.000Z","itunes":{"author":"Dariusz Jędrzejczyk","summary":"Czym jest Service Mesh? Jak został wdrożony do Allegro dla ponad 1000 usług na produkcji? Dlaczego usprawnianie pracy programistom jest dla nas ważne i dlaczego programista to klient? Jak wytwarzamy produkty używane przez zespoły deweloperskie? Kim jest Principal w Allegro? Jak może wyglądać ścieżka kariery programisty? Na te pytania odpowie Dariusz Jędrzejczyk - Principal Software Engineer.","explicit":"false"}}]},"__N_SSG":true}